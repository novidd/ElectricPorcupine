#include "Prop_Tool.hps"
#include "Prop_HudObject.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_audio.hps"

const tString gsCathInteractUnderwaterSound = "Entities_OceanBottom/objects/cathtool/remove";
const tString gsCathInteractNonUnderwaterSound = "Entities_Station/object/cathtool/remove_cathtool_nonunderwater";

//------------------------------------------------------------

enum eCathToolScreen
{
	eCathToolScreen_PreInteract,
	eCathToolScreen_Interact,
	eCathToolScreen_Disconnected
}

enum eCathToolTarget
{
	eCathToolTarget_None,
	eCathToolTarget_Panel,
	eCathToolTarget_Slot
}

enum eCathToolVariant
{
	eCathToolVariant_HelperJane,
	eCathToolVariant_Cath,
	eCathToolVariant_CathDelta,
	eCathToolVariant_CathAbyss,
	
	eCathToolVariant_LastEnum
}

//------------------------------------------------------------

void SetUpOmnitoolGUI(cLuxProp@ apBaseObj)
{
	// Set up GUI screen
	apBaseObj.CreateAndSetupGui("medium_screen", cColor_White, cColor(0,0,0,1), cColor(0,0,0,0), cVector2f(613.0f, 768.0f));
	apBaseObj.SetOnGuiFunction("$_CathTool_OnGui");
}

//------------------------------------------------------------

//////////////////////////////////////////////////////
// TOOL
//////////////////////////////////////////////////////

//------------------------------------------------------------

class cScrPropObjectivePadTool : cScrPropTool
{
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnUpdate(float afTimeStep)
	{
		cScrPropTool::OnUpdate(afTimeStep);
		
		
	}
	
	//------------------------------------------------------------
	
	void OnSetActive(bool abX)
	{
		cScrPropTool::OnSetActive(abX);
		
		if (abX==false && msSlot != "")
		{
			cScript_SetGlobalArgBool(0, false);
			cScript_RunGlobalFunc(msSlot, "cScrPropOmniSlot", "_Global_SetAttachAllowed");
			msSlot = "";
		}
	}
	
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject@ apVars, cResourceVarsObject@ apInstanceVars)
	{
		cScrPropTool::SetupAfterLoad(apWorld, apVars, apInstanceVars);
		
		// Set up GUI screen
		SetUpOmnitoolGUI(mBaseObj);
		
		//Unless another callback has been set, use a default one
		if (msCanBeUsedCallback=="") msCanBeUsedCallback = "$CathTool_CanUse";
		
		mBaseObj.SetVariableUpdateRate(cMath_RandRectf(0.25f, 0.35f)); //call variable update no faster than once per 0.3 sec
		mBaseObj.SetAutoSleep(false);
		
		// Clear out hints after moving to new map (potential if streaming)
		ResetHints();
	}
	
	//------------------------------------------------------------
	
	bool CanInteract(int alType, iPhysicsBody@ apBody)
	{
		if(cScrPropTool::CanInteract(alType, apBody)==false) return false;
		
		if (mbInserted)
		{
			if(mBaseObj.Timer_Exists(0)) return false; //Do so do not get the crossed over icon straight after.
			
			if (CanGiveHint())
				return true;
			return false;
		}
		return true;
	}
	
	//------------------------------------------------------------
	
	void PickUpTool(bool abEquipTool, bool abCallback)
	{
		cScrPropTool::PickUpTool(abEquipTool, abCallback);
		
		Map_AddTimer(mBaseObj.GetName(), 1.0f, "$_CathTool_ResetScreen_Timer");
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GLOBAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void _Global_SetVoiceCharacter()
	{
		msVoiceCharacter = cScript_GetGlobalArgString(0);
	}
	
	//------------------------------------------------------------
	
	void _Global_OnEquip()
	{
		//msEquippedCathTool = cScript_GetGlobalArgString(0);
		
		//Map_AddTimer(mBaseObj.GetName(), 0.5f, "$_CathTool_Equipped_ScreenUpdate_Timer");
		
		cLux_AddDebugMessage("Cathtool equipped");
	}
	
	void _Global_OnUnequip()
	{
		cLux_AddDebugMessage("Cathtool unequipped");
		
		mBaseObj.SetVarString("LookEntities", "");
		//if(mScreenState==eCathToolScreen_Disconnected)
		//	mScreenState = eCathToolScreen_PreInteract;
		
		//Map_RemoveTimer(mBaseObj.GetName());
	}
	
	void _Global_UpdateLookEntities()
	{
		if(cScript_GetGlobalVarInt("CathToolScreen")!=eCathToolScreen_PreInteract)
			return;
			
		tString sLookEntities = cScript_GetGlobalArgString(0);
		mBaseObj.SetVarString("LookEntities", sLookEntities);
		
		iLuxEntity@ pClosestEntity = null;
	
		array<tString> vLookEntities;
		cString_GetStringVec(sLookEntities, vLookEntities, ",");
		
		if(vLookEntities.length()==1)
		{
			@pClosestEntity = cLux_GetCurrentMap().GetEntityByName(vLookEntities[0], eLuxEntityType_LastEnum, "");
		}
		else
		{
			float fMinDistance = 999999.9f;
			cVector3f vPlayerPos = cLux_GetPlayer().GetCamera().GetPosition();
			
			for(int i=0; i<vLookEntities.length(); ++i)
			{
				iLuxEntity@ pEntity = cLux_GetCurrentMap().GetEntityByName(vLookEntities[i], eLuxEntityType_LastEnum, "");
				if(pEntity !is null)
				{
					float fDistanceSqr = cMath_Vector3DistSqr(vPlayerPos, pEntity.GetPosition());
					if(fDistanceSqr<fMinDistance)
					{
						fMinDistance = fDistanceSqr;
						@pClosestEntity = pEntity;
					}
				}			
			}
		}
		
		int lTarget = eCathToolTarget_None;
		
		if(pClosestEntity !is null)
		{
			if(pClosestEntity.GetVarBool("IsOmniSlot"))
				lTarget = eCathToolTarget_Slot;
			else if(pClosestEntity.GetVarBool("IsOmniPanel"))
				lTarget = eCathToolTarget_Panel;
		}
			
		mBaseObj.SetVarInt("Target", lTarget);
	}
		
	//------------------------------------------------------------
	
	/*
	void _Global_SetScreen()
	{
		SetScreen(cScript_GetGlobalArgInt(0));
	}
	
	void _Global_GetScreen()
	{
		cScript_SetGlobalReturnInt(mScreenState);
	}
	 * */
	 
	void _Global_SetGuiActive()
	{
		float fFade = cScript_GetGlobalArgBool(1)? 0.1f : 0.0f;
		mBaseObj.SetGuiActive(cScript_GetGlobalArgBool(0), fFade);
	}
	
	//------------------------------------------------------------
	
	void SetScreen(int alX)
	{
		cScript_SetGlobalVarInt("CathToolScreen", alX);
	}
	
	//------------------------------------------------------------
	
	void Insert()
	{
		msSlot = cScript_GetGlobalArgString(0);
		mbInserted = true;
		
		mBaseObj.SetStaticPhysics(true);
		mBaseObj.SetActive(true);
		//mBaseObj.SetEffectBaseColor(cColor(0));
		//mBaseObj.FadeEffectBaseColor(cColor_White, 0.5);

		mBaseObj.GetMeshEntity().ProcPlayFadeToName("Insert", 0.5, false, 0);
		
		SetScreen(eCathToolScreen_Interact);
	}

	//-------------------------------------------------------
	
	void Detach()
	{
		mBaseObj.SetInteractionDisabled(false);
		
		mBaseObj.WakeUp();
		mBaseObj.SetAutoSleep(false);
		//mBaseObj.FadeEffectBaseColor(cColor(0), 0.5);

		mbInserted = false;
		
		SetScreen(eCathToolScreen_Disconnected);
	}
	
	//-------------------------------------------------------
	
	void _Global_CanBeHighlighted()
	{
		cScript_SetGlobalReturnBool(!mbInserted);
		cScript_SetGlobalArgID(0,mBaseObj.GetID());
	}

	//-------------------------------------------------------
	
	void _Global_IsInserted()
	{
		cScript_SetGlobalReturnBool(IsInserted());
	}

	//-------------------------------------------------------
	
	void _Global_GetSlot()
	{
		cScript_SetGlobalReturnString(msSlot);
	}
		
	//------------------------------------------------------------
	
	bool IsInserted()
	{
		return mBaseObj.IsActive() && mbInserted;
	}
		
	//------------------------------------------------------------
	
	bool OnInteract(int alType, iPhysicsBody@ apBody, const cVector3f &in avFocusPos, const tString&in asData)
	{
		if (mbInserted&&CanGiveHint())
		{
			mBaseObj.Timer_Add(0, 3); //Do so do not get the crossed over icon straight after.
			
			 PlayHint();
			 return true;
		}
		 
		if (cScrPropTool::OnInteract(alType, apBody, avFocusPos, asData)==false)
		   return false;

		tString sSound = "";
		if (Player_GetUnderwater())
		{
			cLux_AddTodoMessage("Sound: Underwater cath tool interact");
			sSound = gsCathInteractUnderwaterSound;
			Sound_PlayGui("Entities_Station/object/cathtool/underwater/remove_cathtool_underwater", 1.0f, eSoundEntryType_WorldClean);
		}
		else
		{
			sSound = gsCathInteractNonUnderwaterSound;
			//Sound_PlayGui("Entities_Station/object/cathtool/remove_cathtool_nonunderwater", 1.0f, eSoundEntryType_World);
			Sound_CreateAtEntity("RemoveCathtoolNonunderwater", "Entities_Station/object/cathtool/remove_cathtool_nonunderwater", "Player");
		}
	  
		return true;
	}
	
	//------------------------------------------------------------
	
	int GetInteractIconId(int alType, iPhysicsBody@ apBody)
	{
		if (mbInserted&&CanGiveHint())
		{
			if (Voice_SceneInvolvingCharacterIsActive(msVoiceCharacter))
				return eCrossHairState_TalkBusy;
			return eCrossHairState_Talk;
		}
		return cScrPropTool::GetInteractIconId(alType, apBody);
	}
	
	//------------------------------------------------------------
	// Hints
	//------------------------------------------------------------

	bool mbHintsEnabled = false;
	tString msHintsCallback = "";

	void ResetHints()
	{
		mbHintsEnabled = false;
		msHintsCallback = "";
	}

	//------------------------------------------------------------

	void _Global_SetHintsCallback()
	{
		SetHintsCallback(cScript_GetGlobalArgString(0));
	}

	//------------------------------------------------------------

	void SetHintsCallback(const tString& in asHintsCallback)
	{
		msHintsCallback = asHintsCallback;
	}

	//------------------------------------------------------------

	void _Global_SetHintsEnabled()
	{
		SetHintsEnabled(cScript_GetGlobalArgBool(0));
	}
	
	//------------------------------------------------------------

	void SetHintsEnabled(bool abEnabled)
	{
		mbHintsEnabled = abEnabled;
	}
	
	//------------------------------------------------------------

	bool CanGiveHint()
	{		
		if (!mbHintsEnabled)
			return false;
			
		tString sHintPrefix = GetHintStringPrefix();
		if (sHintPrefix=="")
			return false;
			
		tString sHint = GetValidHintStringVariant(sHintPrefix, false);
		if (sHint=="")
			return false;
			
		return true;
	}

	//------------------------------------------------------------

	tString GetHintStringPrefix()
	{
		if (msHintsCallback!="")
		{
			cLuxMap @pMap = mBaseObj.GetMap();
			if(pMap.ScriptPrepare("tString " + msHintsCallback + "(const tString &in asEntityName)" ) )
			{
				tString sName = mBaseObj.GetName();
				pMap.SetArgString(0, sName);
				pMap.ScriptExecute();
				tString sHint = pMap.GetReturnString();
				return sHint;
			}
		}
		return "";
	} 
	
	//------------------------------------------------------------
	
	tString GetValidHintStringVariant(const tString& in asHintPrefix, bool abUseTheHint)
	{
		int lPlayedTimes = GetHintPlayedTimes(asHintPrefix);
		lPlayedTimes++;
		tString sHint=asHintPrefix+"_"+lPlayedTimes;
		if (Voice_SubjectExists(sHint)==false)
		{
			//Check if we can go back to previous line?
			lPlayedTimes--;
			sHint=asHintPrefix+"_"+lPlayedTimes;
			if(Voice_SubjectExists(sHint)==false) return "";
		}
		else if(abUseTheHint)
		{
			IncHintPlayedTimes(asHintPrefix);
		}
		
		return sHint;
	}
	
	//------------------------------------------------------------
	
	void PlayHint()
	{
		if (!mbHintsEnabled)
			return;
		
		tString sHintPrefix = GetHintStringPrefix();
		if (sHintPrefix=="")
			return;
			
		tString sHint = GetValidHintStringVariant(sHintPrefix, true);
		if (sHint=="")
			return;
			
		if (Voice_SceneInvolvingCharacterIsActive(msVoiceCharacter))
			return;
			
		Voice_Play(sHint, -1,"", 10);
	}
	
	//------------------------------------------------------------
	
	void IncHintPlayedTimes(const tString& in asHint)
	{
		tString sHintVar = "Hint_"+cLux_GetCurrentMap().GetName()+"_"+asHint;
		cScript_SetGlobalVarInt(sHintVar, GetHintPlayedTimes(asHint)+1);
	}
	
	//------------------------------------------------------------
	
	int GetHintPlayedTimes(const tString& in asHint)
	{
		tString sHintVar = "Hint_"+cLux_GetCurrentMap().GetName()+"_"+asHint;
		return cScript_GetGlobalVarInt(sHintVar);
	}

	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	bool mbInserted = false;
	tString msSlot = "";
	
	tString msVoiceCharacter="Catherine";
	
	//------------------------------------------------------------
	
	
	
	//------------------------------------------------------------
}

//------------------------------------------------------------

//////////////////////////////////////////////////////
// HUD OBJECT
//////////////////////////////////////////////////////

//------------------------------------------------------------

class cScrPropObjectivePadToolHud : cScrPropHudObject
{
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject@ apVars, cResourceVarsObject@ apInstanceVars)
	{
		cScrPropHudObject::SetupAfterLoad(apWorld, apVars, apInstanceVars);
		
		// Set up GUI screen
		SetUpOmnitoolGUI(mBaseObj);
	}
	
	//------------------------------------------------------------
}
