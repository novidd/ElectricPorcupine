
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		///////////////
		// Preload particles
		ParticleSystem_Preload("");
		
		PlayerHands_PreloadHandModel_DeepSea();
		PlayerHands_PreloadHandModel_Diving();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Player setup
		Player_SetAmbientLight_Outdoors();
		PlayerHands_SetHandModel_Diving();
		PlayerEnergy_SetFlowerSwallows(true);
		//Player_SetHealth(0.2f);
		
		/////////////////////////
		// Level setup
		
		// Underwater
		Map_SetUnderwater(true);
		
		//////////////////////////
		// Relay power station
		SetupRelayStation();
		
		// Intro
		bool bDoIntro = true;
		
		////////////////////
		//Audio
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			bDoIntro = false;
			
			Player_SetFlashlightDisabled(false);
			
			//Effect_Fade_In(1);
			//Sound_FadeGlobalVolume(1.0f, 1.0f);
			//Sound_FadeGlobalVolume(1.0f, 1.0f, eSoundEntryType_GuiAll);
		}
		
		if (bDoIntro)
		{
//			Effect_Fade_Out(0);
//			Sound_SetGlobalVolume(0.0f, eSoundEntryType_WorldAll);
//			Sound_SetGlobalVolume(0.0f, eSoundEntryType_GuiWorld);
//			
//			Player_SetFlashlightDisabled(true);
//			
//			SetupWakeUp();
		}
		
		//Map_AddTimer("preload", 2, "TimerBeginPreload");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{

	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			SequenceActivateRelayStationComputer("");
		}
		
		if(alAction == eAction_Test2)
		{
			cLux_AddDebugMessage("Terminal Y pos:"+Map_GetEntity("RelayStationComputer").GetPosition().y);
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	bool CollisionTurtlePathChange(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == -1) return true;
		
		int lTarget = cString_GetNumericSuffixInt(asParent)+1;
		if (lTarget > 5) return false;
		
		Critter_SetGroupEntity("Turtle", "TurtleTarget_"+lTarget);
		
		if (lTarget == 5)
		{
			Map_RemoveTimer("TurtleCommentTimer");
			Entity_SetPlayerLookAtCallback("Turtle", "LookAtFishDespawn", false, false, false);
		}
		
		return true;
	}
	
	//-------------------------------------------------------
	
	bool CollisionTurtleSpawn(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("Turtle", true);
			
		return false;
	}
	
	//} END Critters
	
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *Power relay station*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	void OnChangeRelayStationHatchWheel(const tString &in asEntity, int alState)
	{
		if (alState != 1) return;
	}
	
	//-------------------------------------------------------
	
	bool CollisionRelayStationLadderDown(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("RelayStationLadderArea", true);
		return true;
	}
	
	//-------------------------------------------------------
	
	void SetupRelayStation()
	{
		// Relay terminal
		Light_FadeTo("RelayStationComputerLight_*", cColor(0,0,0,0), -1, 0);
		
		// Relay door starts open
		Entity_SetInteractionDisabled("RelayStationHatchWheel", true);
		Entity_SetInteractionDisabled("RelayStationHatch", true);
		SwingDoor_SetDisableAutoClose("RelayStationHatch", true);
		SwingDoor_SetLocked("RelayStationHatch", false, true);
		SwingDoor_SetClosed("RelayStationHatch", false, true);
		
		Prop_SetStaticPhysics("RelayStationLadder", false);
		
		SetupRelayStationPower(false);
	}
	
	void SetupRelayStationPower(bool abPowerOn)
	{
		// Server racks
		Billboard_SetVisible("serverwave_glow_*", abPowerOn);
		Billboard_SetVisible("serverwave_glow_*", abPowerOn);
		
		Light_SetBrightness("serverwave_light_1", 0);
		
		// Lamps
		Lamp_SetLit("DomeLadderLamp_*", abPowerOn, false);
		Billboard_SetVisible("DomeLadderLamp_2_lightray_*", abPowerOn);
		Billboard_SetVisible("DomeLadderLamp_1_lightray_*", abPowerOn);
		
		Lamp_SetLit("DomeSeaLamp_1", abPowerOn, false);
		Billboard_SetVisible("DomeSeaLamp_1_lightray_*", abPowerOn);
		LensFlare_SetVisible("DomeFlare", abPowerOn);
		
		Lamp_SetLit("DomeTerminalLamp", abPowerOn, false);
		LensFlare_SetVisible("DomeTerminalFlare", abPowerOn);
	}
	
	/////////////////////////////////////////
	// Scene 1 Event A *Enter the dome*
	//{//////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool mbPlayerInFrontOfLadder = false;
	
	bool OnCollide_InFrontOfLadder(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbPlayerInFrontOfLadder = alState == 1;
		
		Entity_SetActive("RelayStationLadderAux", mbPlayerInFrontOfLadder);
		
		return true;
	}
	
	//-------------------------------------------------------
	
	bool CollideRelayInterior(const tString &in asParent, const tString &in asChild, int alState)
	{
		// DO STRANGE MUSIC FIRST TIME ENTERING
		cLux_AddDebugMessage("Player entered the relay station.");
		
		// DISABLE/ENABLE THE HAMMERHEAD SHARK ON ENTER/LEAVE
		
		return false;
	}
	
	//-------------------------------------------------------
		
	//} Event A
	
	/////////////////////////////////////////
	// Scene 1 Event B *Boot up relay terminal*
	//{//////////////////////////////////////
	
	//-------------------------------------------------------
	
	cSequenceStatesData mActivateBackupPowerSequence;
	void SequenceActivateRelayStationComputer(const tString &in asTimer)
	{
		Sequence_Begin("SequenceActivateRelayStationComputer", mActivateBackupPowerSequence);
			
		if (Sequence_DoStepAndWait(1.f))
		{
			Entity_SetVarBool("RelayStationComputer", "FadeIn", false);
			Prop_MoveLinearTo("RelayStationComputer", "RelayStationScreenTargetPos", 1.5, 0.5, 0.2f, true);
			Sound_CreateAtEntity("ScreenRise", "02_03_delta/SFX/terminals/screen_rise", "RelayStationComputer", 0.0f, false, 1.0f);
			
		}
		else if (Sequence_DoStepAndWait(0.05f))
		{
			Terminal_SetGuiActive("RelayStationComputer", true, 1);
			Sound_CreateAtEntity("RelayStationHumStart", "Entities_OceanBottom/tech/terminal/start", "RelayStationComputer", 0.0f, true, 1.0f);
			Sound_CreateAtEntity("RelayStationHum", "Entities_OceanBottom/tech/terminal/loop", "RelayStationComputer", 0.0f, true, 1.0f);
		}
		else if (Sequence_DoStepAndWait(0.95f))
		{
			Light_FadeTo("RelayStationComputerLight_*", cColor(0.518,0.765,1,1), -1, 0.75f); // Hex: 84C3FFFF cColor: 0.518,0.765,1,1
		}
		else if (Sequence_DoStepAndWait(0))
		{
			Entity_SetInteractionDisabled("RelayStationComputer", false);
		}
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	//} Event B
		
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // Relay station
    /////////////////////////////////////////
 
    //-------------------------------------------------------
	
	void OnGuiRelayMap(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_03_delta");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_Taskbar("delta");
		
		OnGuiLaunchBunkerTerminal_Map(cVector2f(0.53, 0.51), cVector2f(0.72, 0.4225));
	}
	
	void OnGuiLaunchBunkerTerminal_Map(const cVector2f &in vZoomOutPos, const cVector2f &in vZoomInPos)
	{
		// Map to power station
		// Use you are here icon
		// StationGui_YouAreHereIcon(ImGui_NrmPosGroup(cVector3f(vZoomOutPos.x, vZoomOutPos.y, 1.2)), ImGui_NrmSizeGroupKeepRatio(0.15));
		
		
		bool bZoomedIn = ImGui_GetStateBool("ZoomedIn", false);
		
		cImGuiGfx image;
		if (bZoomedIn)
		{
			image = cImGuiGfx("map_delta", eImGuiGfx_Texture);
			image.mvUVMax = cVector2f(1, 0.84); // compensate for image not being centered due to power of 2. 
		}
		else
		{
			image = cImGuiGfx("zeppelin_map", eImGuiGfx_Texture);
			//image.mvUVMax = cVector2f(1, 0.84);
		}
		
		tString sZoomEntry = bZoomedIn ? "BunkerMapZoom_Out" : "BunkerMapZoom_In";
		
		ImGui_DoWindowStart("BunkerApp_Map", StationGui_CreateDefaultWindowData(), 
							ImGui_NrmPos(cVector3f(0.02, 0.02, 1)), ImGui_NrmSize(cVector2f(0.96, 0.775f)));
				
				cVector2f vImageSize = ImGui_GetRatioCorrectSizeByRect(image, ImGui_NrmSizeGroup(0.6, 0.95), true);
				
				cVector3f vImagePos = cVector3f_Forward;
				vImagePos = ImGui_NrmPosGroup(cVector3f(0.05, 0, 1));
				vImagePos.y += (ImGui_GetCurrentGroupSize().y-vImageSize.y)*0.5f;
				vImagePos.x += (ImGui_GetCurrentGroupSize().x*0.65-vImageSize.x)*0.5f;
				
				ImGui_GroupBegin(vImagePos, vImageSize);
				
				if (bZoomedIn==false)
				{
					//ImGui_SetModColorMul(cColor_White*0.9);
					StationGui_YouAreHereIcon(ImGui_NrmPosGroup(cVector3f(vZoomOutPos.x, vZoomOutPos.y, 1.2)), ImGui_NrmSizeGroupKeepRatio(0.15));
					ImGui_SetModColorMul(cColor_White);
				}
				else
				{
					StationGui_YouAreHereIcon(ImGui_NrmPosGroup(cVector3f(vZoomInPos.x, vZoomInPos.y, 1.2)), ImGui_NrmSizeGroupKeepRatio(0.125));
				}
				
				//vImagePos.x = (vImagePos.x-vImageSize.x)*0.5f;
				ImGui_DoImage(image, 0, ImGui_NrmSizeGroup(1));
				ImGui_GroupEnd();
				
				cVector3f vButtonPos = ImGui_NrmPosGroup(cVector3f(0.70, 0.75, 1.2));
				cVector2f vButtonSize = ImGui_NrmSizeGroup(0.975, 0.15)-(cVector2f_Right*vButtonPos.x);
				cImGuiButtonData button = StationGui_CreateDefaultButtonData();
				button.mbClipText = false;
				button.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.05);
				ImGui_ResizeFontToFit(sZoomEntry, button.mFont, vButtonSize.x*0.8);
				if(ImGui_DoButtonExt("ZoomButton", sZoomEntry, button, 
									 vButtonPos, vButtonSize))
				{
					if (!bZoomedIn) Depth_Audio_Terminal_Forward(ImGui_GetName());
					else			Depth_Audio_Terminal_Back(ImGui_GetName());
					ImGui_SetStateBool("ZoomedIn", !bZoomedIn);
				}
		ImGui_DoWindowEnd();
	}
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_00_sim.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	//-------------------------------------------------------
	
	//} END AUDIO
}