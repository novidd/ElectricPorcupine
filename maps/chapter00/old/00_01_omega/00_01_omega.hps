
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

enum ePowerState
{
	ePowerState_On,
	ePowerState_Off,
	ePowerState_Unreliable,
	ePowerState_Flicker
}

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		//////////////////////////
		// Outdoor preset
		// Level editor: MiddleGrey: 0.5, Exposure: 0.25, WhitePoint: 2
		Map_Preset_SetupToneMapping("Indoor", 0.5f, 0, 3.5);
		Map_Preset_SetupBloom("Ocean", 160, 0.00001, 0, cColor(0.3, 0.3, 0.3, 0.0));
		Map_Preset_SetupDepthOfField("Ocean", true, 0, 2, 1.0);
		
		Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_default.dds");
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_03_02.dds");
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_02_04.dds");
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_04_01.dds");
		
		Map_Preset_SetupSkybox("Ocean", cColor(0.742,0.742,0.742,1), 1);
		//Map_SetSkyBoxTexture("grayscale_gradient_1_3.dds");
		
		Map_Preset_SetupFog("Ocean", true, 1, 40, 1, cColor(0.016,0.031,0.035,1), 1, false, true);
		Map_Preset_SetupSecondaryFog("Ocean", false, 0, 80, 0.15, cColor(0.004,0.004,0.004,0.004));
		
		//////////////////////////
		// Indoor preset
		// Level editor: MiddleGrey: 0.5, Exposure: 0, WhitePoint: 3.5
		
		Map_Preset_SetupToneMapping("Indoor", 0.5f, 0, 3.5);
		Map_Preset_SetupBloom("Indoor", 128, 0.75f, 0.5f, cColor(1, 1, 1, 2));
		Map_Preset_SetupDepthOfField("Indoor", true, 0, 12, 1.0);
		
		Map_Preset_SetupColorGrading("Indoor", "textures/colorgrading/grading_03_02.dds");
		
		Map_Preset_SetupSkybox("Indoor", cColor(0.742,0.742,0.742,1), 1);
		
		Map_Preset_SetupFog("Indoor", true, 1, 40, 1, cColor(0.002,0.002,0.002,1), 1, false, true);
		Map_Preset_SetupSecondaryFog("Indoor", false, 0, 50, 0.15, cColor(0.075,0.086,0.085,1));
		
		CathTool_ResetScreen(eCathToolVariant_HelperJane);
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		//////////////////////////
		// Particles
		
		/////////////////
		// Preload gui
		OmnitoolGui_Preload();
		
		/////////////////
		// Preload X
		PlayerHands_PreloadHandModel_Diving();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Setup Entities
		SetupStationPower();
		
		Tool_PickUp("CathTool", false, false);
		
		/////////////////////////
		// Player setup
		Player_SetAmbientLight_Indoors();
		PlayerHands_SetHandModel_Diving();
		
		/////////////////////////
		// Level setup
		//Map_Preset_Fade("Ocean", 0.001f);
		
		///////////////////////
		//Particle init
		
		//////////////////////////////////
		// Airlock
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			cLux_AddDebugMessage("Debug on.");
		}
		
		Sound_PreloadProject("02_06_theta_tunnels");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		// ADD SO CURRENT POWERSTAGE ID IS PRINTED ON SCREEN -- MOVE TO ONGUI FUNC
		// ADD SO THE TEXT SAYS "On", "Off", "Unreliable", "Flicker" DEPENDING ON THE STATE
	}
 
	//-------------------------------------------------------
	
	void PrintPowerState()
	{
		
	}
	
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
	
	int mlPowerState = ePowerState_On;
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
	
	/////////////////////////////////////////
	// Omnitool
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool CanUseCathTool(const tString &in asTool, const tString &in asEntity)
	{
		return CathTool_CanUse(asTool, asEntity);
	}
		
	//------------------------------------------------------------
		
	bool OnUseCathTool(const tString &in asTool, const tString &in asEntity)
	{			
		//if (asEntity=="GatePanel")
		//{
		//	CathTool_UseOnPanel(asTool, asEntity);
		//	return false;
		//}
		return false;
	}

	//} End Omnitool
	
	/////////////////////////////////////////
	// Power management
	//{//////////////////////////////////////
	
	void SetupStationPower()
	{
		 
	}
	
	//-------------------------------------------------------
	
	//} Power management
	
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *Airlock*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
		
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// *INTRO*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
		
		//} End Airlock
		
	//} END SCENE X
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *X*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Player activates the airlock*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	
		//} END Event *X*
		
	//} END SCENE X
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////
 
		//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Terminal *TERMINAL X*
		//{//////////////////////////////////////
		
	 
		 //-------------------------------------------------------
	
		/*Put any variables that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		/*Put any functions that are only used Terminal here.*/
		
	
		//-------------------------------------------------------
	
		//} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioHandler(const tString &in asTimer)
	{
		if(asTimer=="FadeInAudio")
		{
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_WorldAll);
			Music_FadeVolumeMul(1.0f, 3.0f);
		}
		if(asTimer=="FadeDownDoorSeq")
		{
			Sound_FadeGlobalVolume(0.4f, 3.0f, eSoundEntryType_WorldAll);
			Map_AddTimer("FadeUpDoorSeq", 20.f, "AudioHandler");
		}
		if(asTimer=="FadeUpDoorSeq")
		{
			Sound_FadeGlobalVolume(1.0f, 8.0f, eSoundEntryType_WorldAll);
		}
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}