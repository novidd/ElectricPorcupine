#include "interfaces/Map_Interface.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

//--------------------------------------------------
 
// GLOBAL CONSTANTS HERE

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	int mlDofID = -1;
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		Player_SetAmbientLight_Indoors();
		
//		Map_Preset_SetupDepthOfField("BridgePreset", true, 0, 12.0, 0.25);
		Map_Preset_SetupDepthOfField("BridgePreset", true, 0, 6.0, 0.25);
		Map_Preset_Fade("BridgePreset", 0.01);
		
		Map_Preset_SetupColorGrading("CameraMode", "grading_rasmustest1.dds");
		
		// The screen effect to mimic a camera
//		Effect_Screen_Start("scanline_overlay.mat", cVector2f(0.5, 0.5), cVector2f(2, 1),  .1, 0.1, 900, 0.1);
		// This sound when in camera mode - Entities_Special/Equipment/scanner/interface_scan_sequence
	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		/////////////////////////////////
		// PARTICLES CREATED
		/////////////////////////////////
		StationGui_PreloadDefault();
		ParticleSystem_Preload("");
		
		////////////////////////////
		// PLAYER HANDS
		////////////////////////////
		PlayerHands_PreloadHandModel_Diving();
		PlayerHands_PreloadHandModel_Human();
		
		///////////////////////////
		// IMGUI
		///////////////////////////
		OmnitoolGui_Preload();
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		bool mbIntroRunning = true;
		
		/////////////////////////
		// Player setup
		PlayerHands_SetHandModel_Human();
//		PlayerHands_SetHandModel_Diving();
		Tool_PickUp("objective_datapad", false, false);
//		Tool_PickUp("omni", false, false);

		Player_SetFlashlightDisabled(true);
		
		PlayerEnergy_SetFlowerSwallows(true);
		
		//Map setup
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
//			bDoIntro = false;

			Player_SetFlashlightDisabled(false);
		}
		
		if (mbIntroRunning)
		{
			TimerIntro("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Effect_Bloom_FadeBrightPass(0.75f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		// RUN RANDOM SCREEN SHAKES HERE WHILE THE PLAYER IS IN DIFFERENT AREAS OF THE MAP
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			// This way the player cannot pull out the pad while already interacting with terminal/reading etc
			if (Player_IsInteracting()) return;
			
			// Unequip tool if already in use
			if (Player_GetCurrentToolEntityName() == "objective_datapad")
			{
				Player_UnequipTool();
				
				// Enables the players ability to interact with terminals/readables while the pad is out
				Player_SetInteractionAllowed(true);
				return;
			}
			
			Player_EquipTool("objective_datapad", "");
			
			// Disable the players ability to interact with terminals/readables while the pad is out
			Player_SetInteractionAllowed(false);
		}
		
		if(alAction == eAction_Test2)
		{
			SlideDoor_SetOpenAmount("BridgeInnerShutter", 1);
		}
		
		if(alAction == eAction_Test3)
		{
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		// Debug screen info
		DebugPrintScreenInfo(afTimeStep);
	}
	
	void DebugPrintScreenInfo(float afTimeStep)
	{
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	//} END MAIN CALLBACKS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Diving suit
	//{////////////////////////////
	
	bool OnCollide_DivingSuitUpdate(const tString &in asParent, const tString &in asChild, int alState)
	{
		cLux_AddDebugMessage(Entity_GetVarString(asChild, ""));
		
		// Make the suit do beeping and booping noises when it updates
		
		return true;
	}
	
	//} END Diving suit
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	//} END Critters
	
	///////////////////////////////
	// Generic timers
	//{////////////////////////////
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void Timer_RemoveParticleSystem(const tString &in asTimer)
	{
		ParticleSystem_Destroy(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//} END Generic timers

	//} END MAIN FUNCTIONS
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
	
		//} END General
		
		// -- IDEAS --
		// The player will lose their part of their arm just like in the original game (before the suicide, in the station)
		// When the player has stood to close to the ravine for too their suit starts to beep (red around screen at beep)
		// Katebot will go deep into the abyss to repair something, on a terminal the player can see Katebot's position moving (green circle)
		// The signal is cut off (the cirlce no no longer moves/or disappears). The player finds Katebot destroyed or covered in rocks
		// Use 01_03_upsilon_outside/katebot/kate_trapped_alarm to locate Katebot more easily
		// In a later scene Katebot has to sacricife herself so the player can proceed forward.
		
		// Map: 00_00_abyss_intro
		
		// Scene 1 --
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		
		// USEFUL SFX:
		// Use level_amb_shared_underwater/amb/spots/oceanlife/fishes_group_swimming for large sources of bubbling/flowing water
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		// level_amb_shared_underwater/amb/spots/scary/eerie_tone_01 in the background
		// level_amb_shared_underwater/amb/spots/scary/ for scary sounds in the cave
		// Play level_amb_shared_underwater/amb/spots/metal/binaural_roof_screech when approaching Wau (still works in a cave)
		// 04_01_stormstart for long scary moment (when the player enters the area with blood covered walls lit up by a fallen spotlight)
		
		/////////////////////////////////////////
		// SCENE 1 EVENT 1 - *Intro - Start*
		//{///////////////////////////////////////
		
		//-------------------------------------------------------

		// STORY:
		// LOCATION: A space station
		// PROTAGONIST: Simon (this is in another timeline)
		// This is a parallel universe of the main game
		// So I can reuse dialogue, notes, voice recordings and such *very naaaaise!*
		
		// The player is on a space station
		// This is set before the events of the main game
		// It's all good
		
		// Music playing from a radio or something like that
	
		// Then a noise from the monitor 
		// *An unidentified lifeform has been detected on XXX*
		// Play a heartbeat - Do special screen effects every heartbeat
		// The player drops the stress ball which then rolls of onto the floor and continues to roll
		// The camera follows it
		// The lights flicker, and the monitor resets (look at omicron outside puzzle)
		// Monitor beeps again
		// The camera snaps back
		
		// The power cuts out
		// The music resets after a *buzz* and then restets and continues to play in the silence
		// On all the screens show a message saying to reboot from the maintenance tunnel
		// The message then disappears (the WAU has internal controls of the ship) - the protagonist still feels he needs to check it out
		// "*sigh* I might as well do a maintenance check..."
		
		// The player needs to enter the vent by the front of the bridge to fix the issue
		// The player will pass through the main hub with the table (think Alien - makes this an Alien refrence (mimic the table with the infamous alien scene))
		
		// The player needs to login in the terminal to get access (their LOG-ID is on the objective datapad in the top left corner)
		// The light on the maintenance shaft lights do green
		
		// !! USE DARKNESS !!
		
		// When the player comes back they see something strange on the floor oil?  (its the wau)
		// It's dripping from a vent in the ceiling
		// The player follows the trail the lab (the trail stops by broken vent shaft - check theta_tunnnels lab)
		
		// The player enters the quarantine scanner
		// There is a monitor saying there is a living organism in a certain room in the labs (other than the player - creepy)
		// It's dark here, the lights turn on/off as the player enters/leaves a room - the player will understand this
		// The light is on in the room with the pods - creepy (but the lights are flickering)
		// There is a trail of goo on the floor (oil-goo from the WAU)
		// The player enters the room
		// The "mist" of coolant is coming out of the pod - it is filled with the wau and its growing on one of the crew members
		// The power turns off
		
		// The player passes through the room with all the other crew passangers frozen in their pods (look at Alien for inspiration)
		// Do a scary whisper here (play 03_02_omicron_inside/AMB/spot/window_rub)
		// Use 03_02_omicron_inside/AMB/spot/whispers at some other point
		// Play a heartbeat - Do special screen effects every heartbeat
		
		// On return he can a large rock passes the sun
		// Have an explosion on earth (use smoke and stuff rising around the area after explosion)'
		// A rock hits the ship as well
		// The whole screen lights up as the player looks at it
		// The Ship shakes
		// The player falls back
		// The power goes into support mode from the blast
		
		// Go back to several camera perspectives while the power is down (always use the same camera perspectives - the player will see the WAU seed here again IT GROWS EACH TIME)
		// The transmission from the MS CURIE plays from a terminal
		// Lights flicker
		
		// Start the perspective from another character boarding the ship from the airlock (tau/phi entrance airlock)
		// Use the camera filter and effects to convey this
		
		// Use heavy depth of field here
		
		// This ship is now partly destroyed and in complete zero gravity
		// You look for survivors
		// The camera feed cuts to static and flatlining when the player dies
		
		// FLASHBACK:
		// Fade in - the player is laying in the bed 
		// The player goes to the lab
		// Interact with the tablet - a message from his daughter (she's dead)
		// Show Amy standing in front of a bright white light, just like in theta_exit
		// Screen goes black
		
		// The player wakes up in reality
		// During the time the player has been out (Have a note reffering to one "Simon Garret")
		// The player needs to find the tram station
		// You need to disable zero gravity by closing of the part of the ship that is comprimized (that way the rest of the ship can decompress)
		
		// Play a heartbeat - Do special screen effects every heartbeat
		
		// You have to choose to kill all 1 or several remaining crew members or not on the way back
		// THIS IS A MORAL CHOICE
		
		// Things have gone to shit, there is a monster on the ship
		// Player gets caught by it
		// The player then wakes up many years later (when the main game's story is set) - the WAU has spread all over the place
		// The ship is running on auxilliary systems on the lowest level (no power only life support and no gravity)
		
		// The WAU has spread all over the place
		// The WAU has started to consume the people in the pods (on of the pods are open and it seems like they are moving around) - mimic theta tunnels goo stuff
		// While you were sleeping people have woken up and tried to survive (use environmental storytelling - blood trails and so on)
		
		// The monster has actually died
		
		// The player will attempt to make contact with Pathos
		// Then a warning goes of because an object is passing close to the ship
		// The player will see the satellite pass their ship out the window (play 05_02/SFX/sat/fly_out)
		
		// They get stabbed from behind 
		// Use ross_blood_blobs for the blood (would have to be in zero-g though)
		
		// Total blackness
		// Then sudden cut to Simon sitting in the Phi space gun (have an interesting camera-on-the-ground perspective)
		// His body is covered in 
		// His red eyes glow and fade in and out
		// THEN END
		
		// INTRO:
		
		// Use this to change how gravity affects the player Player_SetGravity(cVector3f(0, 0, 0));
		
		// Text showing what year it is: "2103"
		
		// A still camera perspective starts fades quickly in (look at omicron puzzle and how that works)
		// Cut to several perspectives
		// Something strange can be seen (the seed which will make the monster spawn)
		
		// Then suddenly to the player sitting in a chair
		// A ball rolls on the table slowly - the camera follows
		// The ball falls on the floor
		
		// 1. Lick it.
		// 2. Don't lick it.
		// 3. Lick it, but only a little.
		
		// Useful sounds:
		// 03_02_omicron_inside/gameplay/robot_puzzle/robot_puzzle_cry
		// 03_02_omicron_inside/gameplay/robot_puzzle/robot_puzzle_torture
		// 03_02_omicron_inside/SFX/robothead_hallway_run - Use after 
		
		// Entities_Station/object/robot_bear/bear_music_01
		// Entities_Station/object/robot_bear/bear_music_02
		// Entities_Station/object/robot_bear/bear_music_03
		// Use these three as a scare after the collapse
		
		// Entities_Station/tech/generator_tiny/generator_blowout - in the vents 
		// Entities_Station/tech/radar_machine/radar_machine - on power on
		// Entities_Station/object/tau_elevator/door/dist/open - on power on
		// Entities_Station/tech/terminal_beeps/pathOS_comp/pathOS_comp_start - entering the hub
		
		// Entities_Station/object/train/screen/screen_up_ding - play on start of commercial program
		
		bool mbIntroRunning = true;
		
		// Introduce a short tutorial for how the datapad works
		// Give the player a hint - "Click 'BUTTON X' to show your current objectives"
		// Pull out the datapad immediately after being picked up with
		// Player_EquipTool("objective_datapad", "");

		void TimerIntro(const tString &in asTimer)
		{	
			mbIntroRunning = true;
//			Map_AddTimer("timer_begin", 0.1f, "TimerBeginSequences");
		
			// Effects for when in player view
			//Effect_ChromaticAberration_StartAnim(8.0f,0.005,0.005,cVector2f_Zero);
			//ffect_ImageTrail_Start(0.08,0.1,7.0,1.0);
			
			// Add effects for the camera with "static_anim_01"
		}
		
		// The screaming of the monster
		// The screen fades in quickly with a *whoosh*
		
		// The player is being chased (this is a cinematic)
		// Screen fades in and out into black
		// Eventually the player gets controll
		
		// The player enters a generator room with a collapsed staircase - the player has to climb it (use climb area)
		// The player thinks they are safe after they've climb up but the monster bursts out of a wall - the player has to change direction
		// The player eventually reaches a safe area with a computer
		// The player needs to close the doors through a emergency quarantine using the computer (they're still getting chased)
		
		// The player needs to sit through this quarantine for some time in this safe room - they cannot leave
		// The power eventually breaks as the quarantine is in progress - the lights turn off
		// The computer screen is glitching making the whole room blink in a blue-white color
		// The monster breaks into the room when there is only silence - stinger here
		
		// The player has to run around the monster - the way it came from
		
		//-------------------------------------------------------
		
		//{ -- LEVEL: THE SHIP
		
		// The player approaches the ship at a diagonal (rotate the ship)
		
		// In the first room is a skeleton with the WAU on the body
		// The blue light shines out the skeletons eyes
		
		// The player gets introduced to a puzzle early on
		// The player needs a code to open a door (the player doesn't actually need one, but this entices the player to explore to look for the girl)
		// The player needs to go down some stairs OR a ladder
		// The player then gets a doorway with light coming from the other end (telling the player "GO HERE")
		// In the middle of the room, the player's leg gets grabbed by some screaming creature into the graveyard with skeletons below
		// Bubbles surround the player, and the sound of metal being broken and bent
		
		//--------------------------------
		
		// Inside the crashed plane an old transmission is playing on a loop
		// When the player enters the back of the plane a flashback plays
		// The screen glitches
		// The sound of screaming and a crying baby can be heard
		// The screen flashes to white as the plane lands in the ocean with a splash
		// Everything is now calm
		
		// The player can find a tiny skeleton with a teddy bear beside it
		// Amnesia Rebirth easter egg here
		
		// Have a hole in the hull which leads to a beautiful and tiny cave with dense corals
		
		// Provide some lore about the meteor and why the ship was around this area
		// The people come here to investigate the meteor crash
		// When they arrived something terrible happened
		// The people all died in the ship crash, however the meteor (the WAU) revived them
		// These people continued to live (with terrible complications), with a new god to worship
		
		// The player finds the corpse of the guy that's been leaving the green candle sticks
		// Create a deeper story around this character
		// NOTE 1:
		// "Sesh, what... the... fuck!"
		// "I came all this way to coms... and for what?"
		// "It's fuckin' destroyed!" (voicecrack at "fuckin'")
		// "Agh!" (kicks a some rocks)
		// *breathes heavily*
		// "Damn suit..." (growl)
		// *calms down*
		// *chuckle*
		// "God damn it..." (despair)
		// *cries*
		
		// The meteor is calling for them
		// The people on the boat lose their minds
		// Have a mass grave somewhere lit up with EITHER red light or the blue natural light
		
		// A room where the candle stick guy set up some testing equipment (with a NOTE)
		
		// Inside the cargo bay the ceiling will have to WAU sky (like in Lambda)
		// The floor inside the cargo bay is sand (use the terrain tool)
		// It is also heavily overgrown since it's so close to the graveyard
		// The cargo bay's ceiling has been broken up, so the player can see multiple floor broken apart (in the distant ceiling the player will see the WAU sky)
		
		// Have a WAU tentacle tree somewhere (the player can see it from outside before entering)
		
		// As the player passes through rooms they'll hear whispers and flashbacks to people when they where alive and having a good time
		// Lots of corpses and moss on them, the WAU has also infeltrated the ship
		// The blinking of lightning coming from outside through the circular windows shining on the skeletons
		// Have an area that is calm of the thunderstorm
		
		// The player leaves the ship to enter the graveyard through a hole in the ship's hull
		
		// The KateBot shows itself here scaring the player a little
		// The KateBot passes outside the ship (try to make it scary though)
		// In the large open cargo room KateBot cuts some steel so it falls down almost accidentally killing the player
		// The KateBot opens a locked door for you from the otherside with its blowtorch thingy

		// Two large double doors open a red light is on the other side (use a lensflare to blind player)
		// Have the mass grave here lit only by the red light and some WAU stuff too
		// The whispering of the dead
		// The screen glitches quickly and violently from on a loop
		// The sound of a heartbeat
		// The sound of a constant shrieking lingering in the background
		// As the player enters the graveyard the sound of a creature hissing comes from the distance
		
		//} -- LEVEL: THE SHIP
		
		//{ -- LEVEL: THE GRAVEYARD
		
		// KateBot pans down from behind the ship hull to greet the player and then guides them
		// When the storm gets more intense in the graveyard lightning strikes once close to the player and the KateBot (use the flash screen effect to make the screen flash intensily)
		// Make the player's ears beep as well (look into symptoms of being really close to a lightning strike or directly hit by one)
		// Some rocks explode and hit the KateBot and she crashes
		// KateBot seems no longer function
		// KateBot will show up again as a surprise during the leviathan-plane section
		
		//} -- LEVEL: THE GRAVEYARD
		
		//{ -- LEVEL: THE METEOR CRATER
		
		// The player is guided by the KateBot from the graveyard to a ravine that leads to the crater
		
		// The ravine opens up the player enters from below
		// The storm is completely calm here. The player can hear a distant thunder storm (tau_outside start area sound)
		// They will see all of the thousands of WAU lights covering the meteor
		// Amazing music here
		// ROLL INTRO CARD HERE
		
		// The center of meteor impact area is in the middle (THE WAU LIGHTS ARE DENSE HERE) 
		// Straight across is the station
		// Somewhere lies the elevator
		
		// The entrance to the lab is closed off because of a quarantine (use the omicron quarantine doors to cover the large airlock door and eventually windows)
		
		//} -- LEVEL: THE METEOR CRATER
		
		//{ -- TRAILER SCRIPT AND IDEAS
		
		// https://www.youtube.com/watch?v=4CSYA9R70R8
		
		// Derek Leiu's pacing graph:
		// Cold open
		// Introduction
		// Escalation
		// Climax
		// Button (optional) - add a sense of cute mystery and intrigue (use KateBot for this)
		
		// Music style 
		// Cut to the beat
		// Incorporate SFX
		// Use music to jog inspiration
		
		// Easy to read
		// Cut to the chase
		// Composition
		// Don't make it too flashy
		// Variation in intensity
		
		// Put logos at the end
		
		// At the end of the trailer have the KateBot show up in the final scene *beep-boop* (as the "Button")
		
		//}
		
		//} END Simon wakes up
		
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // XX
    /////////////////////////////////////////
 
    //-------------------------------------------------------
	
	/////////////////////////////////////////
	// Terminal *XXX*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_01_XXX.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioManager()
	{
		
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}