#include "interfaces/Map_Interface.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

//--------------------------------------------------
 
// GLOBAL CONSTANTS HERE

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	int mlDofID = -1;
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		Player_SetAmbientLight_Indoors();
		
//		Map_Preset_SetupDepthOfField("BridgePreset", true, 0, 12.0, 0.25);
		Map_Preset_SetupDepthOfField("BridgePreset", true, 0, 6.0, 0.25);
		Map_Preset_Fade("BridgePreset", 0.01);
		
		Map_Preset_SetupColorGrading("CameraMode", "grading_rasmustest1.dds");
		
		// The screen effect to mimic a camera
//		Effect_Screen_Start("scanline_overlay.mat", cVector2f(0.5, 0.5), cVector2f(2, 1),  .1, 0.1, 900, 0.1);
		// This sound when in camera mode - Entities_Special/Equipment/scanner/interface_scan_sequence
	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		/////////////////////////////////
		// PARTICLES CREATED
		/////////////////////////////////
		StationGui_PreloadDefault();
		ParticleSystem_Preload("");
		
		////////////////////////////
		// PLAYER HANDS
		////////////////////////////
		PlayerHands_PreloadHandModel_Diving();
		PlayerHands_PreloadHandModel_Human();
		
		///////////////////////////
		// IMGUI
		///////////////////////////
		OmnitoolGui_Preload();
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		bool mbIntroRunning = true;
		
		/////////////////////////
		// Player setup
		PlayerHands_SetHandModel_Human();
//		PlayerHands_SetHandModel_Diving();
		Tool_PickUp("objective_datapad", false, false);
//		Tool_PickUp("omni", false, false);

		Player_SetFlashlightDisabled(true);
		
		PlayerEnergy_SetFlowerSwallows(true);
		
		//Map setup
		
		/////////////////////////
		// Map setup
		
		// -- Scan room
		
		// Makes the trash can flap open 
		Entity_AddForce("trash_can_theta_flap_2", cVector3f(0, 750, 0), true, true);
		
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
//			bDoIntro = false;

			Player_SetFlashlightDisabled(false);
		}
		
		if (mbIntroRunning)
		{
			TimerIntro("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Effect_Bloom_FadeBrightPass(0.75f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		// RUN RANDOM SCREEN SHAKES HERE WHILE THE PLAYER IS IN DIFFERENT AREAS OF THE MAP
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			// This way the player cannot pull out the pad while already interacting with terminal/reading etc
			if (Player_IsInteracting()) return;
			
			// Unequip tool if already in use
			if (Player_GetCurrentToolEntityName() == "objective_datapad")
			{
				Player_UnequipTool();
				
				// Enables the players ability to interact with terminals/readables while the pad is out
				Player_SetInteractionAllowed(true);
				return;
			}
			
			Player_EquipTool("objective_datapad", "");
			
			// Disable the players ability to interact with terminals/readables while the pad is out
			Player_SetInteractionAllowed(false);
		}
		
		if(alAction == eAction_Test2)
		{
			SlideDoor_SetOpenAmount("scanroom_doorshutter", 1);
		}
		
		if(alAction == eAction_Test3)
		{
			Entity_AddForce("trash_can_theta_flap_2", cVector3f(0, 250, 0), true, true);
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		// Debug screen info
		DebugPrintScreenInfo(afTimeStep);
	}
	
	void DebugPrintScreenInfo(float afTimeStep)
	{
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	//} END MAIN CALLBACKS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Diving suit
	//{////////////////////////////
	
	bool OnCollide_DivingSuitUpdate(const tString &in asParent, const tString &in asChild, int alState)
	{
		cLux_AddDebugMessage(Entity_GetVarString(asChild, ""));
		
		// Make the suit do beeping and booping noises when it updates
		
		return true;
	}
	
	//} END Diving suit
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	//} END Critters
	
	///////////////////////////////
	// Generic timers
	//{////////////////////////////
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void Timer_RemoveParticleSystem(const tString &in asTimer)
	{
		ParticleSystem_Destroy(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//} END Generic timers

	//} END MAIN FUNCTIONS
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
	
		//} END General
		
		// -- IDEAS --
		// The player will lose their part of their arm just like in the original game (before the suicide, in the station)
		// When the player has stood to close to the ravine for too their suit starts to beep (red around screen at beep)
		// Katebot will go deep into the abyss to repair something, on a terminal the player can see Katebot's position moving (green circle)
		// The signal is cut off (the cirlce no no longer moves/or disappears). The player finds Katebot destroyed or covered in rocks
		// Use 01_03_upsilon_outside/katebot/kate_trapped_alarm to locate Katebot more easily
		// In a later scene Katebot has to sacricife herself so the player can proceed forward.
		
		// Map: 00_00_abyss_intro
		
		// Scene 1 --
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		
		// USEFUL SFX:
		// Use level_amb_shared_underwater/amb/spots/oceanlife/fishes_group_swimming for large sources of bubbling/flowing water
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		// level_amb_shared_underwater/amb/spots/scary/eerie_tone_01 in the background
		// level_amb_shared_underwater/amb/spots/scary/ for scary sounds in the cave
		// Play level_amb_shared_underwater/amb/spots/metal/binaural_roof_screech when approaching Wau (still works in a cave)
		// 04_01_stormstart for long scary moment (when the player enters the area with blood covered walls lit up by a fallen spotlight)
		
		/////////////////////////////////////////
		// SCENE 1 EVENT 1 - *Intro - Start*
		//{///////////////////////////////////////
		
		//-------------------------------------------------------

		// STORY:
		// LOCATION: A space station
		// PROTAGONIST: Simon (this is in another timeline)
		// This is a parallel universe of the main game
		// So I can reuse dialogue, notes, voice recordings and such *very naaaaise!*
		
		// Make the main menu be set in a 3D game world and interesting (think Cod World at War and Black Ops I, Gears of War, etc).
		// Maybe even make it completely interactive like in Black Ops I
		
		// The story is told from two different perspectives:
		// - "Simon" and through the camera of " SC (Space Convict  - they are a convicts that get sent out on dangerous space missions to "reduce" their sentence) - Inmate ID: C3251" (Block C)
		// Have a document the player can read on their datapad referring to this
		
		// The first scene starts from the perspective of this convict
		// The player will pass Simons body, with the datapad beside them
		// When eventually die, the camera cuts to static on stab impact
		// Then cuts back in when their laying on the floor, dead
		
		// Simon attempts to communciate with one of the crew members through a text on a console (this other person is Catherine)
		// Catherine has hacked into the network and can see the ID of the person see is communicating with
		// Simon attempts to tell her she is Simon
		// She doesn't believe him
		// She disconnects
		
		// Later you find her body
		// Simon mourns - the monster arrives
		// The player has to hide under a table that is straight across from her corpse - this way the player has to stare into her (missing) eyes as the monster passes them
		// Simon breathes heavily and says under his breath "What the fuck..." (or someting of the like)
		
		// -------- GAME EVENTS (IN CHRONOLOGICAL ORDER) --------
		
		// The player is on a space station
		// This is set before the events of the main game
		// It's all good
		
		// Music playing from a radio or something like that
		// Play Minecraft like music (also utilize it throughout the game)
	
		// Then a noise from the monitor 
		// *An unidentified lifeform has been detected on XXX*
		// Play a heartbeat - Do special screen effects every heartbeat
		// The player drops the stress ball which then rolls of onto the floor and continues to roll
		// The camera follows it
		// The lights flicker, and the monitor resets (look at omicron outside puzzle)
		// Monitor beeps again
		// The camera snaps back
		
		// Total blackness
		// Then sudden cut to Simon sitting in the Phi space gun (have an interesting camera-on-the-ground perspective)
		// His body is covered in 
		// His red eyes glow and fade in and out
		// THEN END
		
		// INTRO:
		
		// Use this to change how gravity affects the player Player_SetGravity(cVector3f(0, 0, 0));
		
		// Text showing what year it is: "2103"
		
		// A still camera perspective starts fades quickly in (look at omicron puzzle and how that works)
		// Cut to several perspectives
		// Something strange can be seen (the seed which will make the monster spawn)
		
		// Then suddenly to the player sitting in a chair
		// A ball rolls on the table slowly - the camera follows
		// The ball falls on the floor
		// The camera perspectives follow the ball
		// It rolls into a kids room (colored floor - checkered pattern)
		// The ball hits a doll, it's starts to play a creepy song
		
		// 1. Lick it.
		// 2. Don't lick it.
		// 3. Lick it, but only a little.
		
		// Useful sounds:
		// 03_02_omicron_inside/gameplay/robot_puzzle/robot_puzzle_cry
		// 03_02_omicron_inside/gameplay/robot_puzzle/robot_puzzle_torture
		// 03_02_omicron_inside/SFX/robothead_hallway_run - Use after 
		
		// Entities_Station/object/robot_bear/bear_music_01
		// Entities_Station/object/robot_bear/bear_music_02
		// Entities_Station/object/robot_bear/bear_music_03
		// Use these three as a scare after the collapse
		
		// Entities_Station/tech/generator_tiny/generator_blowout - in the vents 
		// Entities_Station/tech/radar_machine/radar_machine - on power on
		// Entities_Station/object/tau_elevator/door/dist/open - on power on
		// Entities_Station/tech/terminal_beeps/pathOS_comp/pathOS_comp_start - entering the hub
		
		// Entities_Station/object/train/screen/screen_up_ding - play on start of commercial program
		
		bool mbIntroRunning = true;
		
		// Introduce a short tutorial for how the datapad works
		// Give the player a hint - "Click 'BUTTON X' to show your current objectives"
		// Pull out the datapad immediately after being picked up with
		// Player_EquipTool("objective_datapad", "");
		
		// When player reboots the power to power cuts of completely and the puppet shows up
		// The player has to hide below in the desk
		
		// No soundscape sound until lifting quarantine
		// The player can only hear their footsteps and the terminals sounds and stuff
		// Make sure to add the terminal sound for booting up
		// A notification sound will play exactly when the screen lights up
		
		// STORY:
		// LOCATION: A space station
		// PROTAGONIST: Simon (this is in another timeline)
		
		// Use silence a lot (Think the feeling of the back rooms, even The Stanly Parable)
		// What makes source maps so creepy?
		
		// Eventually Simon will realize that he's not human, he looks at his hands as they flicker from human to robot
		
		// 1. The game starts with Simon living his normal life in Toronto (it's not real obviously)
		// It's exactly the same as the original game
		// A camera flash and sound plays as Simon stands in front of the bathroom mirror drinking the medicine (the medicine always spawns here)
		
		// 2. You take the train
		// 3. Do the scan
		// Simon is reminded that he needs to do the survey on his computer
		// There is a survelliance room on the other side of the bathroom window (one-way window).
		// 4. Instead of you teleporting to Upsilon you simply continue as if nothing went wrong
		// 5. EVENING: Sleep at home
		// Simon is feeling drowsy
		
		// 7. NIGHTTIME: Simon wakes up in his apartment from a dog barking
		// Simon gets a headache - you need to take some medicine
		// You cannot turn on the lightswitches 
		
		// 8. Simon can do a survey on his laptop (make the questions strange and oddly creepy and specific)
		
		// 9. The doorbell rings
		// You try to open the front door, it falls straight down
		// Simon emotes "What?" "Hello, anybody there?"
		
		// 8. In Simons dreams he is locked up in a interrogiation room, strapped to a chair, forced to answer questions on a screen
		// "Please momentarily, the [UserNotFound] will be with you shortly."
		// A pop up shows: "A failure to send a http request might require to "
		// "Restart?" (only one option to click yes shows up)
		// A cigarette on the table, with smoke rising
		
		// The room looks like its in Toronto during 2016
		// On the other end of the window is Brendan dead with his throat slit and a final message
		// He locked himself in (on the other end of the door is another corpse, blood is on the door from banging)
		
		// The thing is the people behind these experiments are all dead
		// Catherine lead this investigation (elude to this in the room on the other side of the window)
		
		// 9. The survey screen glitches out - !THE WAU!
		
		// 10. The player finds a way out by breaking the wall
		// 11. Pass through the maintenance path - lots of steam (have a scare here)
		
		// 12. The player find lots of corpses and blood
		
		// X. A lab that lots of general data, brain scans and analyzed data on Simons behavior
		// Have notes about this
		
		// ENDING.
		
		// The player will find this recording eventually of david and simon after the scan: recording_5_simonrecording_1_001_david_001
		
		// After you escape you will find these locations like movie sets or copies
		// You find notes and stuff eluding to how they've tried to make it as accurate as possible - 
		// Catherine is convinced that something must be missing and she tells them to find the missing detail, the others dissagree (conflict)
		
		// The player can interact with terminals that control a scene - like sending a notification to Simons laptop, or making the train seem like its moving (the handles shaking and stuff + sound)
		
		// The other humans are stage props too (interact with the terminal to reenact the old guy entering the subway - this can only be done once~)
		
		// - Simons room - this window is glitching out
		// - The lab
		// - The inside of the train - Use Announcer_StationOsgoode_001_Announcer_001, Announcer_StationQueensPark_001_Announcer_001, Announcer_StationStAndrew_001_Announcer_001, Announcer_StationStPatrick_001_Announcer_001
		// Run these announcer sounds on a loop - the room is dark lights flicker, the player can hear this sound from afar
		
		// Creepy~~
		
		// Have windows that simulate the different views (Toronto, and othe scenery)
		// Sometimes the screen glitches
		// The player can pull one of them off and behind it opens the rest of the station

		void TimerIntro(const tString &in asTimer)
		{	
			mbIntroRunning = true;
//			Map_AddTimer("timer_begin", 0.1f, "TimerBeginSequences");
		
			// Effects for when in player view
			//Effect_ChromaticAberration_StartAnim(8.0f,0.005,0.005,cVector2f_Zero);
			//ffect_ImageTrail_Start(0.08,0.1,7.0,1.0);
			
			// Add effects for the camera with "static_anim_01"
		}
		
		// The screaming of the monster
		// The screen fades in quickly with a *whoosh*
		
		// The player is being chased (this is a cinematic)
		// Screen fades in and out into black
		// Eventually the player gets controll
		
		// The player enters a generator room with a collapsed staircase - the player has to climb it (use climb area)
		// The player thinks they are safe after they've climb up but the monster bursts out of a wall - the player has to change direction
		// The player eventually reaches a safe area with a computer
		// The player needs to close the doors through a emergency quarantine using the computer (they're still getting chased)
		
		// The player needs to sit through this quarantine for some time in this safe room - they cannot leave
		// The power eventually breaks as the quarantine is in progress - the lights turn off
		// The computer screen is glitching making the whole room blink in a blue-white color
		// The monster breaks into the room when there is only silence - stinger here
		
		// The player has to run around the monster - the way it came from
		
		//-------------------------------------------------------
		
		//} END Simon wakes up
		
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // XX
    /////////////////////////////////////////
 
    //-------------------------------------------------------
	
	/////////////////////////////////////////
	// Terminal *XXX*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_01_XXX.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioManager()
	{
		
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}