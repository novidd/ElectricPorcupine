
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{

	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		////////////////////////
		//Setup Entities
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			cLux_AddDebugMessage("Debug on.");
			
			//Add any debug stuff here
		}
		
		////////////////////////////
		// LEVEL SETUP
		//SetPlayerIsUnderwater(true, 0.001f, true);
		
		Player_SetAmbientLight_Indoors();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			
		}
		
		if(alAction == eAction_Test2)
		{
			Effect_VideoDistortion_Start(1.0f, 5.0f, 1.0f, 1.0f, 1.0f);
		}
		
		if(alAction == eAction_Test3)
		{
			//LensFlare_SetVisible("XXX", false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
	
	bool mbPlayerIsUnderwater = true;
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
	
	void SetPlayerIsUnderwater(bool abX, float afFadeTime, bool abAffectEffecs)
	{
		mbPlayerIsUnderwater = abX;
		
		//////////////////////////////
		// Underwater
		if(mbPlayerIsUnderwater)
		{
			Map_SetUnderwater(true);
			Player_SetAmbientLight_Outdoors(true);
			cLux_GetCurrentMap().GetWorld().SetDirectionalLightActive(true);
			Map_Preset_Fade("BRIDGE", afFadeTime);
			
			//////////////
			// Enable all visibility areas and critters
			//Visibility_SetAreaActive("VisibilityAreaArea_outside*", true);
			//Entity_SetActive("X_*", true);
		}
		//////////////////////////////
		// Indoors
		else
		{
			////////////////
			// Disable visibility areas and critters
			//Visibility_SetAreaActive("VisibilityAreaArea_outside*", false);
			//Entity_SetActive("X_*", false);
		}
	}
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO A (FLASH)*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Intro*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	 
		//} END Event *Name Of Event*
	 
	//} END SCENE 1
 
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////
 
		//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Terminal *TERMINAL X*
		//{//////////////////////////////////////
		
	 
		 //-------------------------------------------------------
	
		/*Put any variables that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		/*Put any functions that are only used Terminal here.*/
		
	
		//-------------------------------------------------------
	
		//} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//} END AUDIO
 
}