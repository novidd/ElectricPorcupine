
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

enum ePowerState
{
	ePowerState_On,
	ePowerState_Off,
	ePowerState_Unreliable,
	ePowerState_Flicker
}

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		//////////////////////////
		// Outdoor preset
		Map_Preset_SetupBloom("Ocean", 160, 0.00001, 0, cColor(0.3, 0.3, 0.3, 0.0));
		Map_Preset_SetupDepthOfField("Ocean", true, 0, 2, 1.0);
		//Map_Preset_SetupFog("Ocean", true, 1, 40, 1, cColor(0.004,0.004,0.004,1), 1, false, true);
		//Map_Preset_SetupSecondaryFog("Ocean", false);
		
		//Map_Preset_SetupSkybox("Ocean", cColor(0.741,0.741,0.741,1), 1.0);
		
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_03_02.dds");
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_02_04.dds");
		Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_default.dds");
		//Map_Preset_SetupColorGrading("Ocean", "textures/colorgrading/grading_04_01.dds");
		
		//////////////////////////
		// Indoor preset
		Map_Preset_SetupBloom("Indoor", 128, 0.75f, 0.5f, cColor(1, 1, 1, 2));
		Map_Preset_SetupDepthOfField("Indoor", true, 0, 12, 1.0);
		Map_Preset_SetupSkybox("Indoor", cColor(0.471,0.902,1,1), 0.6);
		Map_Preset_SetupFog("Indoor", true, 0, 10, 1, cColor(0.188,0.188,0.188,0.016), 1, false, false);
		Map_Preset_SetupSecondaryFog("Indoor", false, 0, 50, 0.15, cColor(0.075,0.086,0.085,1));
		Map_Preset_SetupColorGrading("Indoor", "textures/colorgrading/grading_01_01.dds");
		
		CathTool_ResetScreen(eCathToolVariant_HelperJane);
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		//////////////////////////
		// Particles
		
		/////////////////
		// Preload gui
		OmnitoolGui_Preload();
		
		/////////////////
		// Preload X
		PlayerHands_PreloadHandModel_Diving();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Setup Entities
		SetupArrivalOutsideTheta();
		
		Tool_PickUp("CathTool", false, false);
		
		/////////////////////////
		// Player setup
		Player_SetAmbientLight_Indoors();
		PlayerHands_SetHandModel_Diving();
		
		/////////////////////////
		// Level setup
		
		///////////////////////
		//Particle init
		ParticleSystem_SetActive("first_airlock_drain_particles_*", false);
		ParticleSystem_SetActive("second_airlock_drain_particles_*", false);
		
		//////////////////////////////////
		// Airlock
		Light_SetVisible("Station_AirLockBoxNoPower", false);
		Light_SetVisible("Station_AirLockBoxPower", true);
		AirlockLampHandler("AirlockLamp", false);
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			mbRunIntro = false;
			
			cLux_AddDebugMessage("Debug on.");
		}
		
		AudioHandler("Start");
		
		if(mbRunIntro)
		{
			SequenceIntro("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Map_SetUnderwater(true);
		
		Player_SetFlashlightEnvParticleMul(10);
		
		Map_Preset_Fade("Ocean", 0.1);
		//Map_Preset_Fade("Indoor", 0.1);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Map_AddTimer("StartOpenGateTimer", 2, "SequenceOpenThetame");
			Audio_ThetaGateStart();
		}
		
		if(alAction == eAction_Test2)
		{
			Effect_VideoDistortion_Start(1.0f, 5.0f, 1.0f, 1.0f, 1.0f);
		}
		
		if(alAction == eAction_Test3)
		{
			SlideDoor_SetClosed("Shutter_*", false, false);
			cLux_AddDebugMessage("Opening shutters...");
		}
		
		if(alAction == eAction_Test4)
		{
			SetPlayerIsUnderwater(false, 0.01f);
		}
		
		if(alAction == eAction_Test5)
		{
			Button_SetSwitchedOn("AirlockActivateButton", true, true);
			SequenceAirlockEnter("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
	
	/////////////////////////////////////////
	// Omnitool
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool CanUseCathTool(const tString &in asTool, const tString &in asEntity)
	{
		return CathTool_CanUse(asTool, asEntity);
	}
		
	//------------------------------------------------------------
		
	bool OnUseCathTool(const tString &in asTool, const tString &in asEntity)
	{			
		if (asEntity=="GatePanel")
		{
			CathTool_UseOnPanel(asTool, asEntity);
			return false;
		}
		return false;
	}

	//} End omnitool
	
	//-------------------------------------------------------
	
	bool mbPlayerIsUnderwater=true;
 
	//-------------------------------------------------------
 
	void SetPlayerIsUnderwater(bool abX, float afFadeTime)
	{
		mbPlayerIsUnderwater = abX;
		
		//////////////////////////////
		//Underwater
		if(mbPlayerIsUnderwater)
		{
			Map_SetUnderwater(true);
			Player_SetAmbientLight_Outdoors(true);
			cLux_GetCurrentMap().GetWorld().SetDirectionalLightActive(true);
			Map_Preset_Fade("Ocean", afFadeTime);
			
			Map_SetEnvironmentParticlesActive(true);

			//////////////
			// Enable all visibility areas and critters
			//Visibility_SetAreaActive("VisibilityAreaArea_outside*", true);
		}
		//////////////////////////////
		//In Air
		else
		{
			Map_SetUnderwater(false);
			Player_SetAmbientLight_Indoors(true);
			cLux_GetCurrentMap().GetWorld().SetDirectionalLightActive(false);
			Map_Preset_Fade("Indoor", afFadeTime);
			
			Map_SetEnvironmentParticlesActive(false);

			////////////////
			// Disable visibility areas and critters
			//Visibility_SetAreaActive("VisibilityAreaArea_outside*", false);
		}
	}
	
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *Intro*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
		
		bool mbRunIntro = true;
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// *INTRO*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
		
		cSequenceStatesData mIntroSequence;
		void SequenceIntro(const tString &in asTimer)
		{
			Sequence_Begin("SequenceIntro", mIntroSequence);
			
			if (Sequence_DoStepAndWait(0.1f))
			{
				cLux_AddDebugMessage("!!INTRO START!!");
				
				Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_WorldAll);
				Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_GuiWorld);
				
				Effect_Fade_Out(0.001f);
			}
			else if(Sequence_DoStepAndWait(0.1f))
			{
				Player_Teleport("PlayerStartArea_1");
				
				Player_SetActive(false);
				Player_ShowCrossHairIcons(false);
				
				Player_SetHealth(0.75f);
				Player_SetFlashlightActive(false,true);
				Player_SetFlashlightDisabled(true);
			}
			////////////////////////////
			// INTRO A
			
			////////////////////////////
			// INTRO B
			else if(Sequence_DoStepAndWait(0.1f))
			{
				//Voice_Play("HelperJane_PluggedIn_GoodPower");
			}
			else if(Sequence_DoStepAndWait(0.1f))
			{
				//OnUseCathTool("CathTool", "AirlockPanel");
			}
			Sequence_End();
		}
		
		//} End INTRO
		
		/////////////////////////////////////////
		// *OPEN GATE*
		//{//////////////////////////////////////
		
		int mlGateShakeID;
		
		void OpenGate(const tString &in asEntity, int alState)
		{
			if(alState != 1) return;
			
			Entity_SetActive("IntroToolArea", false);
			
			Entity_SetInteractionDisabled(asEntity, true);
			
			// If the GUI isn't on, turn it on
			Terminal_SetGuiActive("Airlock2GUI",true);
			Entity_SetActive("Airlock2GUI", true);
			
			Map_RemoveTimer("TimerTurnOffGUI");
			Map_AddTimer("TimerTurnOffGUI",10.0f,"TimerTurnOffGUI");
			
			//SequenceOpenThetame();
		}
		
		void TimerTurnOffGUI(const tString& in asTimer)
		{
			Terminal_SetGuiActive("Airlock2GUI",false);
			Entity_SetActive("Airlock2GUI", false);
		}
		
		void OnGuiAirlock2(const tString&in asEntityName, float afTimeStep)
		{
			ImGui_SetTransCategory("01_04_transport_station");
		
			StationGuiBG_Scanlines();
			StationGuiBG_Backdrop();
			
			StationGui_BigStatusMessage_Old("GUIAirlockFixed", gStationGuiColor_Highlight, 1.75, true);
		}
		
		//-------------------------------------------------------
		
		cSequenceStatesData mOpenThetameSequence;
	
		void SequenceOpenThetame(const tString &in asTimer)
		{
			Sequence_Begin("SequenceOpenThetame", mOpenThetameSequence);
			
			if (Sequence_DoStepAndWait(1))
			{
				SlideDoor_SetOpenAmount("ThetaWarningLight_Gate_*", 1, false);
			}
			else if (Sequence_DoStepAndWait(2))
			{
				MoveObject_SetState("ThetaWarningLight_Base_*", 1);
			}
			else if (Sequence_DoStepAndWait(1))
			{
				/////////////////////////////////////////////
				// TUrn off some lamps to put focus on door
				Map_AddTimer("ThetaGateLamp_Top_1", 0, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_Top_2", 0.4, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_OverrideBox", 1, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_OverrideBox_Spotlight", 1, "TimerFadeLightToBlack");
				Map_AddTimer("ThetaGateLamp_OverrideBox_Pointlight", 1, "TimerFadeLightToBlack");
				
				/////////////////////////////////////////////
				// Turn on spinning warning lights
				Lamp_SetLit("ThetaWarningLight_Lamp_*", true, true);
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_1", 5, 7.5, cVector3f(0, 0, 1), true, "");
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_2", 5, 7.5, cVector3f(0, 0, -1), true, "");
			}		
			else if (Sequence_DoStepAndWait(8.5))
			{			
				mlGateShakeID = Effect_Shake_Start(0.005, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				Entity_PlayAnimation("ThetaGate_Up", "Open", 0);
				Entity_PlayAnimation("ThetaGate_Down", "Open", 0);
				Map_AddTimer("ThetaGate_ClutchPS_1", 2, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_2", 3, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_3", 5, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_4", 6, "TimerThetaGateClutchRelease");
			}
			else if (Sequence_DoStepAndWait(0.25))
			{
				for (int i = 1; Entity_Exists("ThetaGate_BubblePS_" + i); i++)
				{
					Map_AddTimer("ThetaGate_BubblePS_" + i, cMath_RandRectf(0, 0.5),"TimerThetaGatePSDelay");
				}
			}
			else if (Sequence_DoStepAndWait(11))
			{			
				Effect_Shake_FadeOut(mlGateShakeID, 1);
				mlGateShakeID = Effect_Shake_Start(0.0075, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				SlideDoor_SetOpenAmount("ThetaGate_Up", 1, false);
				SlideDoor_SetOpenAmount("ThetaGate_Down", 0.875, false);
				
				for (int i = 1; Entity_Exists("ThetaGate_DustFallPS_" + i); i++)
				{
					Map_AddTimer("ThetaGate_DustFallPS_" + i, cMath_RandRectf(0.4, 0.75),"TimerThetaGatePSDelay");
				}
			}
			else if (Sequence_DoStepAndWait(1))
			{
				Effect_Shake_FadeOut(mlGateShakeID, 0.5);
				Lever_SetAutoMoveEnabled("ThetaGate_Walkboard", true);
				Lever_SetAutoMoveTarget("ThetaGate_Walkboard", 1);
			}
			else if (Sequence_DoStepAndWait(1))
			{
				Entity_PlayAnimation("ThetaGate_Left", "Open", 0);
				Entity_PlayAnimation("ThetaGate_Right", "Open", 0);
			}
			else if (Sequence_DoStepAndWait(7))
			{
				mlGateShakeID = Effect_Shake_Start(0.0075, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				SlideDoor_SetOpenAmount("ThetaGate_Left", 1, false);
				SlideDoor_SetOpenAmount("ThetaGate_Right", 1, false);
			}
			else if (Sequence_DoStepAndWait(0.5))
			{
				Effect_Shake_FadeOut(mlGateShakeID, 1);
				
				Lamp_SetLit("ThetaWarningLight_Lamp_*", false, true);
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_1", 5, 0, cVector3f(0, 0, 1), false, "");
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_2", 5, 0, cVector3f(0, 0, -1), false, "");
			}
			else if (Sequence_DoStepAndWait(2))
			{
				MoveObject_SetState("ThetaWarningLight_Base_*", 0);
			}
			else if (Sequence_DoStepAndWait(2))
			{
				SlideDoor_SetOpenAmount("ThetaWarningLight_Gate_*", 0, false);
			}
			
			Sequence_End();
		}

		//-------------------------------------------------------
		
		void TimerThetaGateClutchRelease(const tString &in asTimer)
		{
			/////////////////////
			// Effects 
			ParticleSystem_CreateAtEntity(asTimer + "_Particles", "oneshot_sand_cascade.ps", asTimer, false);
		}

		//-------------------------------------------------------
		
		void TimerThetaGatePSDelay(const tString &in asTimer)
		{
			// Create the particle system specified in the UserVar of the area
			ParticleSystem_CreateAtEntity(asTimer + "_Particles", Entity_GetVarString(asTimer, ""), asTimer, false);
		}
		
		//-------------------------------------------------------
		
		void SetupArrivalOutsideTheta()
		{
			Entity_StopAnimation("ThetaGate_Up");
			Entity_StopAnimation("ThetaGate_Down");
			Entity_StopAnimation("ThetaGate_Left");
			Entity_StopAnimation("ThetaGate_Right");
		}
		
		//} End OPEN GATE
		
	//} END SCENE X
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *Airlock*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Player activates the airlock*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		bool mbAirlockFlushed = false;
		
		int mlAirlockShakeID = -1;
		
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
		
		bool mbLockdownOverridden = true;
		
		void OnGuiStartAirlock(const tString&in asEntityName, float afTimeStep)
		{
			ImGui_SetTransCategory("00_00_introa");
				
			StationGuiBG_Scanlines();
			StationGuiBG_Backdrop();
			
			cStationGui_BigStatusMessageSettings statusMessage;
			if (Button_IsSwitchedOn("AirlockActivateButton") && mbAirlockFlushed == false)
			{
				cLux_AddDebugMessage("!!UPDATE TERMINAL GUI!! -- Airlock flushing!");

				statusMessage.mfTextSizeMul = 2;
				StationGui_BigStatusMessage("AirlockFlushing", statusMessage);
			}
			
			else if (mbAirlockFlushed)
			{
				cLux_AddDebugMessage("!!UPDATE TERMINAL GUI!! -- Airlock flushed!");
				
				statusMessage.mfTextSizeMul = 2;
				StationGui_BigStatusMessage("NoPower", statusMessage);
			}
			else
			{
				statusMessage.mColor = gStationGuiColor_Highlight;
				statusMessage.mfTextSizeMul = 2;
				StationGui_BigStatusMessage("AirlockReady", statusMessage);
			}
		}
		
		//-------------------------------------------------------
		
		void ActiveAirlock(const tString &in asEntity)
		{
			SequenceAirlockEnter("");
		}
		
		//-------------------------------------------------------
		
		cSequenceStatesData mSequenceAirlockEnter;
		void SequenceAirlockEnter(const tString &in asName)
		{
			Sequence_Begin("SequenceAirlockEnter", mSequenceAirlockEnter);
			
			if (Sequence_DoStepAndWait(1.f))
			{
				// UPDATE TERMINAL GUI
				
				SlideDoor_SetClosed("AirlockOceanDoor", true, false);
			}
			if (Sequence_DoStepAndWait(2.f))
			{
				Sound_CreateAtEntity("DrainingAlarm", "Entities_OceanBottom/airlock/alarms/draining_alarm", "FauxAirlockMotorSource");
			}
			if (Sequence_DoStepAndWait(1.0f))
			{
				AirlockLampHandler("AirlockLamp", true);
				
				Sound_CreateAtEntity("AirlockAlarm", "01_02_upsilon_inside_02/sfx/bulkhead_broken/bulkhead_alarm", "AirlockAlarmSoundSource");
			}
			if (Sequence_DoStepAndWait(3.5f)) // 1.5f
			{
				Sound_Stop("side_airlock_idle", 1.0f);
				Sound_CreateAtEntity("FauxPump", "Entities_OceanBottom/airlock/uw/pump/pump_loop", "AirlockSoundSource");
				AirlockEffectsFlushWaterFinalAirlock();
				
				Entity_SetActive("LiquidArea_1", true);
				FogArea_SetVisible("LiquidArea_1_Fog", false);
				
				for (int i = 1; Entity_Exists("AuxAirlockBubbleArea_"+i);i++)
				{
					Map_AddTimer("AuxAirlockBubbleArea_"+i, cMath_RandRectf(0, 1), "TimerCreateEndFlushBubbles");
				}
			}
			if (Sequence_DoStepAndWait(5.0f)) // 1.5f
			{
				LiquidArea_MoveLinearTo("LiquidArea_1", "LiquidArea_Target", 0.5, 0.5, 1);
			}
			else if (Sequence_DoStepAndWait(4.0))
			{
				Map_SetUnderwater(false);
				
				ParticleSystem_Destroy("first_airlock_drain_particles_*");
				Entity_SetActive("AMB_AirlockWater", false);
				Entity_SetActive("AMB_AirlockAir", true);
				
				cLux_AddDebugMessage("Air area activated...");
			}
			else if (Sequence_DoStepAndWait(5.5)) // 7.5f
			{
				ParticleSystem_Destroy("second_airlock_drain_particles_*");
			}
			else if (Sequence_DoStepAndWait(1.0))
			{
				Sound_CreateAtEntity("AirlockDrainLargeSweet", "Entities_OceanBottom/airlock/uw/water/drain/large_sweet", "AirlockPowerSource", 1.f, false, 1.0f);
				Sound_CreateAtEntity("AirlockTremor", "03_01_omicron_outside/SFX/special/dome_tremor", "AirlockPowerSource", 1.f, false, 1.0f);
				
				Effect_Shake_Start(0.1, 0.4, 0.1, 0.25, cVector3f(1, 0.25, 1), 32);
				Effect_Shake_Start(0.01, 0.5, 0.2, 3.0, cVector3f(1, 0.25, 1), 32);
				Effect_Sway_FadeIn(0.2, 1, 1, 0, 1, 0.25f, 0.995f, 0);
				Effect_VideoDistortion_Start(0.3f, 3.0f, 0.1f, 0.1f);
				
				Music_Stop(0.1f, eMusicPrio_BgAmb);
			}
			if (Sequence_DoStepAndWait(6.5f)) // ALWAYS EIGHT SECONDS TILL DOOR TRIES TO OPEN
			{
				// KILL POWER
				//mbAirlockPowerOff = true;
				
				// Update the power state --> ePowerState_Unreliable
				
				// UPDATE TERMINAL GUI
				// KILL TERMINAL GUI -- HAVE GLITCH EFFECTS MOMENTS BEFORE
				
				// AIR LOCK LAMP
				AirlockLampHandler("AirlockLamp", false);
				
				Light_SetVisible("Station_AirLockBoxPower", false);
				Light_SetVisible("Station_AirLockBoxNoPower", true);
				
				// HANDLE AIRLOCK BUTTON
				Light_SetVisible("Station_AirLockButtonLight_1", false);
				Entity_SetActive("AirlockActivateButton", false);
				Entity_SetActive("AirlockActivateButtonOff", true);
				
				// TERMINAL
				Entity_SetActive("AirlockTerminalGUI", false);
				Entity_SetActive("AirlockTerminalNoPower", true);
				
				Lamp_SetLit("TerminalLamp", false, false);
				
				//SLOWLY FADE IN SCARY MUSIC
				Music_Play("NPC_construct_short2.ogg", 0.5, false, eMusicPrio_BigEvent);
				
				if (Player_GetFlashlightActive())
					Player_SetFlashlightActive(true);
			}
			if (Sequence_DoStepAndWait(0.5f))
			{
				// HEARTBEAT AND BREATH
				Depth_Audio_Fear_MediumIntensity();
				Effect_VideoDistortion_Start(0.4f, 15.0f, 0.1f, 1.0f);
			}
			if (Sequence_DoStepAndWait(2.0f))
			{
				// TRY TO OPEN DOOR
				SlideDoor_SetOpenAmount("AirlockStationDoor", 0.1, false);
				Sound_CreateAtEntity("AirlockDrainLargeSweet", "01_02_upsilon_inside_02/sfx/bulkhead_broken/bulkhead_fail", "AirlockDoorSoundSource", 1.f, false, 1.0f);
				ParticleSystem_CreateAtEntity("AirlockSparks", "elec_spark_oneshot.ps", "AirlockDoorSpark", true);
			}
			if (Sequence_DoStepAndWait(0.1f))
			{				
				// MONSTER PASSES DOOR??
				// MUSIC ?
			}
			if (Sequence_DoStepAndWait(6)) // 2.0f -- Increase time
			{
				// REBOOT TO UNRELIABLE POWER
				
				// UPDATE TERMINAL GUI
				// REBOOT TERMINAL GUI -- HAVE GLITCH EFFECTS
				
				// DISABLE AIRLOCK ACTIVATE BUTTON - RED LIGHT COLOR
			}
			if (Sequence_DoStepAndWait(1)) // ALWAYS 1.0f from voice line to door opening
			{
				Voice_Play("HelperJane_PluggedIn_BadPower");
			}
			if (Sequence_DoStepAndWait(2))
			{
				// SUCCESSFULLY OPEN THE AIRLOCK DOOR
				SlideDoor_SetClosed("AirlockStationDoor", false, false);
			}
			Sequence_End();
		}
		
		//-------------------------------------------------------
		
		void AirlockLampHandler(const tString &in asEntity, bool abOn)
		{
			if (abOn)
			{
				Sound_Play("Light_spin", 1.0f);
				Entity_PlayAnimation(asEntity, "spin", 0.1f, true);
				Light_FadeTo("Station_AirLockLight_1", cColor(1,0,0,0.467), 6, 0.5f);
			}
			else
			{
				Sound_Stop("Light_spin", 0.1f);
				Entity_StopAnimation(asEntity);
				Light_FadeTo("Station_AirLockLight_1", cColor(0,0,0,1), 6, 0.5f);
			}
			
			ParticleSystem_SetActive("AirlockLamp_PS", abOn);
			ParticleSystem_SetVisible("AirlockLamp_PS", abOn);
			
			Lamp_SetLit(asEntity, abOn, false);
			Light_SetFlickerActive("Station_AirLockLight_1", abOn);
		}
		
		//-------------------------------------------------------
		
		void TimerCreateEndFlushBubbles(const tString &in asTimer)
		{
			int lIndex = cString_GetNumericSuffixInt(asTimer);
			ParticleSystem_CreateAtEntityExt(asTimer, "loop_waterbubbles_medium_stream.ps", "AuxAirlockBubbleArea_"+lIndex, false, cColor(0.487,0.628,0.7,0.25), 0.25);
			Map_AddTimer(asTimer, 0.75, "TimerDestroyParticleSystem"); 
			cLux_AddDebugMessage("TimerCreateEndFlushBubbles");
		}
		
		//-------------------------------------------------------
		
		void TimerDestroyParticleSystem(const tString &in asTimer)
		{
			ParticleSystem_Destroy(asTimer);
		}
		
		//-------------------------------------------------------
		//Airlock audio
		
		void AirlockEffectsFlushWaterFinalAirlock()
		{
			Depth_Audio_AirlockDrainLeadInUW();
			Depth_Audio_AirlockDrainLoopUW();
			Map_AddTimer("AirlockDrainUWStopTimer", 8.75f, "AirlockDrainUWStopFinalAirlock");
		}
		
		//-------------------------------------------------------
		
		void AirlockDrainUWStopFinalAirlock(const tString &in asTimer)
		{
			Depth_Audio_PlayLeaveWater();
			Sound_Stop("FauxPump", 0.55f);
			Sound_CreateAtEntity("PumpingAirLoop", "Entities_OceanBottom/airlock/air/pump/pump_loop_nointro", "FauxAirlockMotorSource", 0.55f, false, 1.0f);
			
			Depth_Audio_AirlockDrainLoopUWStop();
			Depth_Audio_AirlockDrainLoopAir();
			
			Map_AddTimer("AirlockDrainingAirStopTimer", 3.0f, "AirlockDrainingAirStopFinalAirlock");
		}
		
		//-------------------------------------------------------
		
		void AirlockDrainingAirStopFinalAirlock(const tString &in asTimer)
		{
			Depth_Audio_AirlockDrainLoopAirStop();
			Depth_Audio_AirlockDrainLeadOutAir();
			
			Sound_Stop("PumpingAirLoop", 0.25f);
			Sound_CreateAtEntity("PumpAirLeadOut", "Entities_OceanBottom/airlock/air/pump/pump_end", "FauxAirlockMotorSource", 0.0f, false, 1.0f);
			
			Sound_Play("side_airlock_idle_air", 0.1f);
			
			mbAirlockFlushed = true;
		}
		
		//-------------------------------------------------------
		
		void CollideAirlockWater(int alState)
		{
			cLux_AddDebugMessage("Splush!");
			
			if(alState == -1)
			{
				ParticleSystem_SetActive("first_airlock_drain_particles_*", true);
				ParticleSystem_SetActive("second_airlock_drain_particles_*", true);
				ParticleSystem_SetVisible("first_airlock_drain_particles_*", true);
				ParticleSystem_SetVisible("second_airlock_drain_particles_*", true);
				
				ParticleSystem_SetActive("AirlockLamp_PS", false);
				ParticleSystem_SetVisible("AirlockLamp_PS", false);
				
				for (int i = 1; Entity_Exists("EndAirlockSplashPSArea_"+i); i++)
				{
					if (ParticleSystem_Exists("EndAirlockSplashParticles_"+i))
						continue;

					ParticleSystem_CreateAtEntity("EndAirlockSplashParticles_"+i, "03_01_substation_leak_impact", "EndAirlockSplashPSArea_"+i, true);
				}
				
				for (int i = 1; ParticleSystem_Exists("AuxAirlockBubbleArea_"+i); i++)
				{
					ParticleSystem_SetVisible("AuxAirlockBubbleArea_"+i, false);
				}
				
				Map_Preset_Fade("Indoor", 15.0);
				
				Entity_SetActive("AMB_AirlockAir", true);
				Entity_SetActive("AMB_AirlockWater", false);
				
				Map_SetEnvironmentParticlesActive(false);
				
				Depth_Audio_PlayLeaveWater();
			}
			
			else
			{
				ParticleSystem_SetVisible("first_airlock_drain_particles_*", false);
				ParticleSystem_SetVisible("second_airlock_drain_particles_*", false);
				
				if (ParticleSystem_Exists("EndAirlockSplashParticles_1"))
					ParticleSystem_SetVisible("EndAirlockSplashParticles_*", false);
				
				for (int i = 1; ParticleSystem_Exists("AuxAirlockBubbleArea_"+i); i++)
				{
					ParticleSystem_SetVisible("AuxAirlockBubbleArea_"+i, true);
				}
				
				Entity_SetActive("AMB_AirlockWater", true);
				Entity_SetActive("AMB_AirlockAir", false);
				
				Map_SetEnvironmentParticlesActive(true);
				
				Depth_Audio_PlayEnterWater();
			}
		}
	
		//} END Event *Player activates the airlock*
		
	//} END SCENE X
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *Station Entrance*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Player enters the station*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
		
		void Trigger_EnterStation(const tString &in asParent, const tString &in asChild, int alState)
		{
			cLux_AddDebugMessage("Player entered station...");
			
			// START THE AUDIO HANDLER FOR THE STATION
		}
	
		//} END Event *Player enters the station*
		
	//} END SCENE X
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////
 
		//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Terminal *TERMINAL X*
		//{//////////////////////////////////////
		
	 
		 //-------------------------------------------------------
	
		/*Put any variables that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		/*Put any functions that are only used Terminal here.*/
		
	
		//-------------------------------------------------------
	
		//} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioHandler(const tString &in asTimer)
	{
		if(asTimer=="FadeInAudio")
		{
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_WorldAll);
			Music_FadeVolumeMul(1.0f, 3.0f);
		}
		if(asTimer=="FadeDownDoorSeq")
		{
			Sound_FadeGlobalVolume(0.4f, 3.0f, eSoundEntryType_WorldAll);
			Map_AddTimer("FadeUpDoorSeq", 20.f, "AudioHandler");
		}
		if(asTimer=="FadeUpDoorSeq")
		{
			Sound_FadeGlobalVolume(1.0f, 8.0f, eSoundEntryType_WorldAll);
		}
		if(asTimer=="Start" && mbRunIntro)
		{
			Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_WorldAll);
			Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_GuiWorld);
		}
		else
		{
			Sound_FadeGlobalVolume(1.0f, 0.25f, eSoundEntryType_WorldAll);
			Sound_FadeGlobalVolume(1.0f, 0.25f, eSoundEntryType_GuiWorld);
		}
	}
	
	//-------------------------------------------------------
	
	//Gate sequence
	void Audio_ThetaGateStart()
	{
		Sound_CreateAtEntity("ThetaGateSequence", "02_04_theta_outside/SFX/theta_door_Sequence", "ThetaGateSoundSource");
		Map_AddTimer("ThetaGateSequenceMusic", 15.f, "ThetaGateSequence");
		Map_AddTimer("FadeDownDoorSeq", 6.0f, "AudioHandler");
		//Map_AddTimer("StopAmbientMusicQuickly", 1.0f, "AmbientMusicHandler");
		//mbAmbientMusicAllowed = false;
		
		//Remove anything that might overlap
		//Entity_SetActive("GraveyardTrigger", false);
		//Map_RemoveTimer("TimerGraveyardMusic");
		//Music_Stop(3.0f, eMusicPrio_BgAmb);
	}
	
	//-------------------------------------------------------
	
	void ThetaGateSequence (const tString &in asTimer)
	{
		//Start music and fade sound
		if(asTimer=="ThetaGateSequenceMusic")
		{
			cLux_AddDebugMessage("Fading Down Theta Gate");
			//Music_PlayExt("02_04_gate", false, 0.85, 1, 0, 0, eMusicPrio_BigEvent, true);
			Sound_Fade("ThetaGateSequence", 0.85f, 10.0f);
			Map_AddTimer("ThetaGateFadeUp", 12.0f, "ThetaGateSequence");
		}
		//Fade up gate sound after music
		else if(asTimer=="ThetaGateFadeUp")
		{
			cLux_AddDebugMessage("Fading Up Theta Gate");
			Sound_Fade("ThetaGateSequence", 1.f, 4.0f);
		}
	}
	
	//} END AUDIO
}