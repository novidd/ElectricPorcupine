
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		//Effect_Bloom_FadeBrightPass(0.00001, 0); //sets pixels over 127 (255 * 0.5) to add to bloom
		//Effect_Bloom_FadeBloomWidth(160, 0); //sets 128 pixels in bloom width, looks best within 32 - 512 pixels.
		//Effect_Bloom_FadeBloomTint(0.3, 0.3, 0.3, 0); //sets red tint to bloom
		
		//Effect_DoF_Start(0, 12, 1.0f, 0);
		
		//////////////////////////
		// Outdoor preset
		Map_Preset_SetupBloom("IntroOutdoor", 160, 0.00001, 0, cColor(0.3, 0.3, 0.3, 0.0));
		Map_Preset_SetupDepthOfField("IntroOutdoor", true, 0, 12, 1.0);
		Map_Preset_SetupSkybox("IntroOutdoor", cColor(0.471,0.902,1,1), 0.6);
		Map_Preset_SetupFog("IntroOutdoor", true, 0, 100, 0.3, cColor(0.047,0.086,0.098,1), 1, true, true);
		Map_Preset_SetupSecondaryFog("IntroOutdoor", true, 0, 50, 0.15, cColor(0.075,0.086,0.085,1));
		Map_Preset_SetupDirLight("IntroOutdoor", true, cColor(0.481,0.736,0.77,1), 2, cVector3f(-0.752, -0.637, -0.169), cColor(0.071,0.231,0.255,1), cColor(0.069,0.232,0.254,1));
		
		//////////////////////////
		// Indoor preset
		//Map_Preset_SetupBloom("IntroIndoor", 160, 0.00001, 0, cColor(0.3, 0.3, 0.3, 0.0));
		Map_Preset_SetupDepthOfField("IntroIndoor", true, 0, 12, 1.0);
		Map_Preset_SetupSkybox("IntroIndoor", cColor(0.741,0.741,0.741,1), 1.0);
		Map_Preset_SetupFog("IntroIndoor", true, 1, 40, 1, cColor(0.004,0.004,0.004,1), 1, false, true);
		Map_Preset_SetupSecondaryFog("IntroIndoor", false);
		Map_Preset_SetupColorGrading("IntroIndoor", "textures/colorgrading/grading_03_02.dds");
		
		Map_SetEnvironmentParticlesActive(false);
		Map_SetEnvironmentParticleVisible("*", false);
		
		Effect_Bloom_FadeBrightPass(0.65f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
		
		//iTexture@ pSkybox = cResources_CreateTextureCubeMap("grayscale_gradient_1_3.dds",false);
		//cLux_GetCurrentMap().GetWorld().SetFogSkyboxTexture(pSkybox);
		
		CathTool_ResetScreen(eCathToolVariant_HelperJane);
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		//////////////////////////
		// Particles
		
		/////////////////
		// Preload gui
		OmnitoolGui_Preload();
		
		/////////////////
		// Preload X
		PlayerHands_PreloadHandModel_Diving();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		////////////////////////
		// Setup Entities
		SetupArrivalOutsideTheta();
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			mbRunIntro = false;
			
			cLux_AddDebugMessage("Debug on.");
		}
		////////////////////////////
		// Intro setup
		if(mbRunIntro)
			SequenceIntro("");
		
		////////////////////////////
		// Level setup
		Player_SetAmbientLight_Outdoors();
		
		PlayerHands_SetHandModel_Diving();
		
		Tool_PickUp("CathTool", false, false);
		
		EyeTracking_RegisterEntity("GatePanel", true, false, true, 15.0f, 4.0f);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		AudioHandler("Intro");
		//Map_SetUnderwater(true);
		//Map_Preset_Fade("IntroIndoor", 0.1);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Map_AddTimer("StartOpenGateTimer", 2, "SequenceOpenThetame");
			Audio_ThetaGateStart();
		}
		
		if(alAction == eAction_Test2)
		{
			Effect_VideoDistortion_Start(1.0f, 5.0f, 1.0f, 1.0f, 1.0f);
		}
		
		if(alAction == eAction_Test3)
		{
			SlideDoor_SetClosed("Shutter_*", false, false);
			cLux_AddDebugMessage("Opening shutters...");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
	
	/////////////////////////////////////////
	// Omnitool
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool CanUseCathTool(const tString &in asTool, const tString &in asEntity)
	{
		return CathTool_CanUse(asTool, asEntity);
	}
		
	//------------------------------------------------------------
		
	bool OnUseCathTool(const tString &in asTool, const tString &in asEntity)
	{			
		if (asEntity=="GatePanel")
		{
			CathTool_UseOnPanel(asTool, asEntity);
			return false;
		}
		return false;
	}

	//-------------------------------------------------------
		
	void Timer_OmnitoolPluggedIn(const tString &in asTimer)
	{
		
	}

	//} End omnitool
	
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
		
		bool mbRunIntro = true;
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *WHAT HAPPENS IN THE INTRO*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
		
		int mlGateShakeID = -1;
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
		
		//-------------------------------------------------------
		
		/////////////////////////////////////////
		// INTRO
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		cSequenceStatesData mIntroSequence;
		void SequenceIntro(const tString &in asTimer)
		{
			Sequence_Begin("SequenceIntro", mIntroSequence);
			
			if (Sequence_DoStepAndWait(0.1f))
			{
				cLux_AddDebugMessage("!!INTRO START!!");
			}
			else if(Sequence_DoStepAndWait(0.1f))
			{
				Player_Teleport("Intro");
				
				Player_SetActive(false);
				Player_ShowCrossHairIcons(false);
			}
			else if(Sequence_DoStepAndWait(0.1f))
			{
				Voice_Play("HelperJane_PluggedIn_GoodPower");
			}
			Sequence_End();
		}

		//-------------------------------------------------------

		//} End INTRO
		
		/////////////////////////////////////////
		// OPEN GATE
		//{//////////////////////////////////////
		
		void OpenGate(const tString &in asEntity, int alState)
		{
			if(alState != 1) return;
			
			Entity_SetActive("IntroToolArea", false);
			
			Entity_SetInteractionDisabled(asEntity, true);
			
			// If the GUI isn't on, turn it on
			Terminal_SetGuiActive("Airlock2GUI",true);
			Entity_SetActive("Airlock2GUI", true);
			
			Map_RemoveTimer("TimerTurnOffGUI");
			Map_AddTimer("TimerTurnOffGUI",10.0f,"TimerTurnOffGUI");
			
			//SequenceOpenThetame();
		}
		
		void TimerTurnOffGUI(const tString& in asTimer)
		{
			Terminal_SetGuiActive("Airlock2GUI",false);
			Entity_SetActive("Airlock2GUI", false);
		}
		
		void OnGuiAirlock2(const tString&in asEntityName, float afTimeStep)
		{
			ImGui_SetTransCategory("01_04_transport_station");
		
			StationGuiBG_Scanlines();
			StationGuiBG_Backdrop();
			
			StationGui_BigStatusMessage_Old("GUIAirlockFixed", gStationGuiColor_Highlight, 1.75, true);
		}
		
		//-------------------------------------------------------
		
		cSequenceStatesData mOpenThetameSequence;
	
		void SequenceOpenThetame(const tString &in asTimer)
		{
			Sequence_Begin("SequenceOpenThetame", mOpenThetameSequence);
			
			if (Sequence_DoStepAndWait(1))
			{
				SlideDoor_SetOpenAmount("ThetaWarningLight_Gate_*", 1, false);
			}
			else if (Sequence_DoStepAndWait(2))
			{
				MoveObject_SetState("ThetaWarningLight_Base_*", 1);
			}
			else if (Sequence_DoStepAndWait(1))
			{
				/////////////////////////////////////////////
				// TUrn off some lamps to put focus on door
				Map_AddTimer("ThetaGateLamp_Top_1", 0, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_Top_2", 0.4, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_OverrideBox", 1, "TimerSetLampUnlit");
				Map_AddTimer("ThetaGateLamp_OverrideBox_Spotlight", 1, "TimerFadeLightToBlack");
				Map_AddTimer("ThetaGateLamp_OverrideBox_Pointlight", 1, "TimerFadeLightToBlack");
				
				/////////////////////////////////////////////
				// Turn on spinning warning lights
				Lamp_SetLit("ThetaWarningLight_Lamp_*", true, true);
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_1", 5, 7.5, cVector3f(0, 0, 1), true, "");
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_2", 5, 7.5, cVector3f(0, 0, -1), true, "");
			}		
			else if (Sequence_DoStepAndWait(8.5))
			{			
				mlGateShakeID = Effect_Shake_Start(0.005, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				Entity_PlayAnimation("ThetaGate_Up", "Open", 0);
				Entity_PlayAnimation("ThetaGate_Down", "Open", 0);
				Map_AddTimer("ThetaGate_ClutchPS_1", 2, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_2", 3, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_3", 5, "TimerThetaGateClutchRelease");
				Map_AddTimer("ThetaGate_ClutchPS_4", 6, "TimerThetaGateClutchRelease");
			}
			else if (Sequence_DoStepAndWait(0.25))
			{
				for (int i = 1; Entity_Exists("ThetaGate_BubblePS_" + i); i++)
				{
					Map_AddTimer("ThetaGate_BubblePS_" + i, cMath_RandRectf(0, 0.5),"TimerThetaGatePSDelay");
				}
			}
			else if (Sequence_DoStepAndWait(11))
			{			
				Effect_Shake_FadeOut(mlGateShakeID, 1);
				mlGateShakeID = Effect_Shake_Start(0.0075, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				SlideDoor_SetOpenAmount("ThetaGate_Up", 1, false);
				SlideDoor_SetOpenAmount("ThetaGate_Down", 0.875, false);
				
				for (int i = 1; Entity_Exists("ThetaGate_DustFallPS_" + i); i++)
				{
					Map_AddTimer("ThetaGate_DustFallPS_" + i, cMath_RandRectf(0.4, 0.75),"TimerThetaGatePSDelay");
				}
			}
			else if (Sequence_DoStepAndWait(1))
			{
				Effect_Shake_FadeOut(mlGateShakeID, 0.5);
				Lever_SetAutoMoveEnabled("ThetaGate_Walkboard", true);
				Lever_SetAutoMoveTarget("ThetaGate_Walkboard", 1);
			}
			else if (Sequence_DoStepAndWait(1))
			{
				Entity_PlayAnimation("ThetaGate_Left", "Open", 0);
				Entity_PlayAnimation("ThetaGate_Right", "Open", 0);
			}
			else if (Sequence_DoStepAndWait(7))
			{
				mlGateShakeID = Effect_Shake_Start(0.0075, -1, 2, 0);
				Effect_Shake_SetSourceEntity(mlGateShakeID, "ThetaGate_Down", 10, 25);
				
				SlideDoor_SetOpenAmount("ThetaGate_Left", 1, false);
				SlideDoor_SetOpenAmount("ThetaGate_Right", 1, false);
			}
			else if (Sequence_DoStepAndWait(0.5))
			{
				Effect_Shake_FadeOut(mlGateShakeID, 1);
				
				Lamp_SetLit("ThetaWarningLight_Lamp_*", false, true);
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_1", 5, 0, cVector3f(0, 0, 1), false, "");
				Prop_RotateToSpeed("ThetaWarningLight_Lamp_2", 5, 0, cVector3f(0, 0, -1), false, "");
			}
			else if (Sequence_DoStepAndWait(2))
			{
				MoveObject_SetState("ThetaWarningLight_Base_*", 0);
			}
			else if (Sequence_DoStepAndWait(2))
			{
				SlideDoor_SetOpenAmount("ThetaWarningLight_Gate_*", 0, false);
			}
			
			Sequence_End();
		}

		//-------------------------------------------------------
		
		void TimerThetaGateClutchRelease(const tString &in asTimer)
		{
			/////////////////////
			// Effects 
			ParticleSystem_CreateAtEntity(asTimer + "_Particles", "oneshot_sand_cascade.ps", asTimer, false);
		}

		//-------------------------------------------------------
		
		void TimerThetaGatePSDelay(const tString &in asTimer)
		{
			// Create the particle system specified in the UserVar of the area
			ParticleSystem_CreateAtEntity(asTimer + "_Particles", Entity_GetVarString(asTimer, ""), asTimer, false);
		}
		
		//-------------------------------------------------------
		
		void SetupArrivalOutsideTheta()
		{
			Entity_StopAnimation("ThetaGate_Up");
			Entity_StopAnimation("ThetaGate_Down");
			Entity_StopAnimation("ThetaGate_Left");
			Entity_StopAnimation("ThetaGate_Right");
		}
		
		//} End OPEN GAATE
	 
		//} END Event *Name Of Event*
		
	//} END SCENE 1
 
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////
 
		//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Terminal *TERMINAL X*
		//{//////////////////////////////////////
		
	 
		 //-------------------------------------------------------
	
		/*Put any variables that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		/*Put any functions that are only used Terminal here.*/
		
	
		//-------------------------------------------------------
	
		//} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioHandler(const tString &in asTimer)
	{
		if(asTimer=="FadeInAudio")
		{
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_WorldAll);
			Music_FadeVolumeMul(1.0f, 3.0f);
		}
		if(asTimer=="FadeDownDoorSeq")
		{
			Sound_FadeGlobalVolume(0.4f, 3.0f, eSoundEntryType_WorldAll);
			Map_AddTimer("FadeUpDoorSeq", 20.f, "AudioHandler");
		}
		if(asTimer=="FadeUpDoorSeq")
		{
			Sound_FadeGlobalVolume(1.0f, 8.0f, eSoundEntryType_WorldAll);
		}
		if(asTimer=="Intro" && mbRunIntro)
		{
			Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_WorldAll);
			Sound_FadeGlobalVolume(0.0f, 0.25f, eSoundEntryType_GuiWorld);
		}
		else
		{
			Sound_FadeGlobalVolume(1.0f, 0.25f, eSoundEntryType_WorldAll);
			Sound_FadeGlobalVolume(1.0f, 0.25f, eSoundEntryType_GuiWorld);
		}
	}
	
	//-------------------------------------------------------
	
	//Gate sequence
	void Audio_ThetaGateStart()
	{
		Sound_CreateAtEntity("ThetaGateSequence", "02_04_theta_outside/SFX/theta_door_Sequence", "ThetaGateSoundSource");
		Map_AddTimer("ThetaGateSequenceMusic", 15.f, "ThetaGateSequence");
		Map_AddTimer("FadeDownDoorSeq", 6.0f, "AudioHandler");
		//Map_AddTimer("StopAmbientMusicQuickly", 1.0f, "AmbientMusicHandler");
		//mbAmbientMusicAllowed = false;
		
		//Remove anything that might overlap
		//Entity_SetActive("GraveyardTrigger", false);
		//Map_RemoveTimer("TimerGraveyardMusic");
		//Music_Stop(3.0f, eMusicPrio_BgAmb);
	}
	
	//-------------------------------------------------------
	
	void ThetaGateSequence (const tString &in asTimer)
	{
		//Start music and fade sound
		if(asTimer=="ThetaGateSequenceMusic")
		{
			cLux_AddDebugMessage("Fading Down Theta Gate");
			//Music_PlayExt("02_04_gate", false, 0.85, 1, 0, 0, eMusicPrio_BigEvent, true);
			Sound_Fade("ThetaGateSequence", 0.85f, 10.0f);
			Map_AddTimer("ThetaGateFadeUp", 12.0f, "ThetaGateSequence");
		}
		//Fade up gate sound after music
		else if(asTimer=="ThetaGateFadeUp")
		{
			cLux_AddDebugMessage("Fading Up Theta Gate");
			Sound_Fade("ThetaGateSequence", 1.f, 4.0f);
		}
	}
	
	//} END AUDIO
}