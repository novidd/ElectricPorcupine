#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

#include "helpers/EP_helper_general.hps"

//--------------------------------------------------

const cVector3f gvCurrentDir = cVector3f(0.894, 0, 0.447);
const cVector3f gvStage1CurrentDir = cVector3f(0, 0, -1);
const cVector3f gvStage2CurrentDir = cVector3f(-1, 0, 0);

const float gfDofMax = 3.0f;

const cColor gvPreIntroSkyBoxColor = cColor(0.086,0.294,0.361,1);

const float gfFogNormal = 45.0f;
const float gfFogStorm1 = 40.0f;
const float gfFogStorm2 = 35.0f;
const float gfFogStorm3 = 25.0f;

const float gfParticleAlpha = 0.75f;

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	int mlDofID = -1;
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		// Gui
		OmnitoolGui_Preload();
		
		// Player hands
		PlayerHands_PreloadHandModel_Diving();
		
		// Particles
		ParticleSystem_Preload("");
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		//GetBase().SetDisplayNameEntry("00-00-XXX");

//		Effect_Bloom_FadeBrightPass(0.00001, 0); //sets pixels over 127 (255 * 0.5) to add to bloom
//		Effect_Bloom_FadeBloomWidth(160, 0); //sets 128 pixels in bloom width, looks best within 32 - 512 pixels.
//		Effect_Bloom_FadeBloomTint(0.3, 0.3, 0.3, 0); //sets red tint to bloom
//		
//		Effect_DoF_Start(0, 12, 1.0f, 0);

		mlDofID = Effect_DoF_Start(0.0f, gfDofMax, 0.5, 0.0);
		
		Effect_Bloom_FadeBrightPass(0.00001, 0);
		Effect_Bloom_FadeBloomWidth(64, 0);
		Effect_Bloom_FadeBloomTint(0.6, 0.4, 0.4, 0);
		Map_SetUnderwater(true);
		Map_FadeFogEnd(gfFogNormal, 0.0f);
		Effect_RadialBlur_SetDirect(0.1, 0.75, 0.1);
		
		cLux_GetCurrentMap().GetWorld().SetFogUnderwater(true);
		
		//////////////////////
		//Level start
		CathTool_ResetScreen(eCathToolVariant_CathDelta);
		CathTool_Insert("CathTool", "ZeppelinCathTerminal", false);
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		bool bDoIntro = true;
		
		/////////////////////////
		// Player setup
//		Player_SetAmbientLight_Outdoors();
		PlayerHands_SetHandModel_Diving();
		
		PlayerEnergy_SetFlowerSwallows(true);
		
		//Map setup
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			bDoIntro = false;
		}
		
		if (bDoIntro)
		{
			SetupIntro();
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Map_SetUnderwater(true);
		Player_SetFlashlightEnvParticleMul(16);
		Map_SetUnderwater(true);
		//Game_AutoSave();
//		Map_AddTimer("TimerStartPreload",10.0f,"TimerStartPreload");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			SequenceIntro("");
		}
		
		if(alAction == eAction_Test2)
		{
//			// Do damage on crash
//			Player_GiveDamage(0, 0, eDamageType_Hit, "");
////			Player_MoveHeadPos(cVector3f_Down*0.375, 9, 4, 0);
//			Depth_Audio_PlayerTakeDamage();
//			
			EP_StartScareEffects();
		}
		
		if (alAction == eAction_Test3)
		{
			SetStormStrengthVisuals("tau_storm_med.ps", "tau_storm_dirt_med.ps", gvCurrentDir*3.5f, gfFogNormal, 0.0f);
			UpdateStormScreenEffect();
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
 
	//} END MAIN CALLBACKS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	//} END Critters
	
	///////////////////////////////
	// Generic timers
	//{////////////////////////////
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void Timer_RemoveParticleSystem(const tString &in asTimer)
	{
		ParticleSystem_Destroy(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//} END Generic timers

	//} END MAIN FUNCTIONS
	
	////////////////
	// NOTES
	//{/////////////
	
	// PLAY THIS WHEN THE PLAYER OPENS THEIR EYES ON PLAYER WAKE UP
	void OnTimer_PostWakeUpMusic(const tString &in asTimer)
	{
		Music_PlayOverlay("00_00_postwakeup", 0.5f);
	}

	// 02_04_stormends when the player wakes up
	
	// Zepplin code: 049
	
//		// Do damage on leviathan pick up
//		Player_GiveDamage(1, 0, eDamageType_Hit, "");
//		Player_MoveHeadPos(cVector3f_Down*0.375, 9, 4, 0);
//		Depth_Audio_PlayerTakeDamage();
	
	// Mod premice --
	// This mod plays on the idea that there are multiple Simons in the world
	// Two "alive" Simons will communicate in the final scene in the mod (The other Simon is the original game one in Phi).
	// They're all stuck in a loop, in control by the WAU for life to survive by any means necessary.
	
	// -- IDEAS --
	// The player will lose their part of their arm just like in the original game (before the suicide, in the station)
	// When the player has stood to close to the ravie for too their suit starts to beep (red around screen at beep)
	// Katebot will go deep into the abyss to repair something, on a terminal the player can see Katebot's position moving (green circle)
	// The signal is cut off (the cirlce no no longer moves/or disappears). The player finds Katebot destroyed or covered in rocks
	// Use 01_03_upsilon_outside/katebot/kate_trapped_alarm to locate Katebot more easily
	// In a later scene Katebot has to sacricife herself so the player can proceed forward.
	
	// Map: 00_00_abyss_forest
	
	// Scene 2 --
	// The asteroid attracts objects with running electricity
	// That is why the Zeppellin and the Plane is there (Lore friendly, I guess)
	// The WAU is growing from the asteroid spreading over the crator toward the obelisk (the obelisk works as a beacon so to speak)
	// The asteroids existence is causing some odd phenomena, explore this in the station level with text entries and such
	
	// After moving forward for some time with low hp, the player will find a WAU source attached to a crashed plane
	// In the distance in a deep basin, filled with small cracks and holes in the ground and black smokers, the smoke from the zeppilin can be seen
	// The basin was formed from an asteroid that crash there, form the ground so it looks like it was formed by a asteroid (impact "waves")
	// The player proceed downward and finds Cath on the crashed Zeppilin (it has crashed on slightly elevated ground, allowing the player to see the blinking lights below from afar)
	// When stepping by the terminal the zeppilin will rotate downward slightly, (sound of creaking metal, sand grains etc)
	// Simon emotes, "Whoa..."
	
	// The asteroid is sill there in the center of the basin, the WAU has grown on it and it is connected to the obelisk (showing the path forward)
	
	// Scene 3 --
	// The crashed plane (use rebirth assets)
	// The plane is crashed on slightly elevated ground to line up the spotlight with the path out
	
	// Tease the player with a scare when they look up at the path out using Katebots light
	
	// Import sound files by copying the project files into the mod directory
	
	// Import the skeleton models from Rebirth
	
	// The player finds a crashed plane, the plane is filled with skeletons in the seats
	// Place moss and other decals all over the plane to make it look like it has been underwater
	// Use curie-delta pod metal scraps for broken metal pieces attached directly to the plane
	// The WAU covers the cockpit of the plane, creating blue light shining into the back of the plane filled with thick fog (+ USE A SPOTLIGHT)
	// Place the skeletons in the same seat as the characters in Amnesia: Rebirth
	// Place a dead baby on Tasi's seat, when the player looks at it do something special
	// Each window has broken glass (check omicron main entrance dead guy helmet), except Tasi's window
	// Whispers play as you enter the back of the plane (add easter egg here to, voices from Rebirth?)
	// Also add a distortion area in the back
	
	// The player will with help of the WAU turn on the Plane so it's spotlight reveal the path forward
	// Use the spotlights for the Train or the ones used in upsilon_outside
	// There is a clear opening above the player 
	// However there is no viable path up above, Simon emotes
	
	// On a Timer enable an Area when the player collides with, Katebot will reveal a collapse cave entrance
	// Use forces on the rocks
	// Katebot's light will blind the player's eyes *beep* *boop*
	// When the player approaches to close, Katebot goes deeper
	// When the player enters the cave, Katebot is nowhere to be found
	
	// Path to and finding the Obelisk
	
	// In the valley below the obelisk there are a ton of sunken ships, crashed planes and so on the player will see when the lightning flashes
	
	// NEXT MAP (THE NEST, AND PATH TO STATION)

	// Scene (?) --
	// The Katebot leads the player outside in the storm
	// When the storm is the most intense, Katebot will be hit a rock (spark, bubble, rock, sand particles on impact)
	// Simon emotes on impact
	// She crashes deeper into the storm, the player will need to look for her (don't make it too hard)
	// (Use the katebot beacon sfx, make her light blink to)
	// The player has to lift the rocks off Katebot, then she will continue to lead the player
	// They cross a field of tall black smokers, and smoker holes
	// Eventually they will approach the station
	
	// Scene (?) --
	// The station (outside)
	
	// HAVE AN ELEVATOR WITH LIGHTS ALONG THE WALLS, WHEN THE ELEVATOR PASS A ROW OF LIGHTS TURN THEM ON (LIKE DEATH STRANDING ELEVATORS)
	
	// Small blue light along a row in front of important entrances/safety lines/airlocks and such, also place safety guard rails where needed
	// When the player and Katebot get cloes enough the power in the station turns on (it will look pretty cool)
	// There is a mountain behind the station, distant lightning can be seen behind the mountain
	// Ravines go along the front side of the station, filled with black smokers and lava at the bottom
	// Kinda will look like a station on Mustafar, very cool
	// Can't cross the bridge, find another path around (?)
	
	// Scene (?) --
	// The station (inside)
		
		// Dialogue for a robot
		// Player attempts to speak with him "Hello?"
		// He doesn't respond, he continues
        // "It's darker than before."
        // "Shut me down (low pitch on 'down' then reset), I'd rather be nothing."

	// play 02_07_theta_exit_a/SFX/enter_sweet when entering a watery/damp area with dripping water
	
	// Have a decontamination process early in the level
	// "Thank you for your cooperation"
	
	// Lots of flickering lights like in Dead Space 2
	
	// Make this station filled with wild life, greeneries, fresh breathable air
	// A new ecosystem has been born
	// Have a cave below the laboratory (hole in the floor), the wildlife has spread into the cave creating it's own habitat
	// In this cave below have blue light bugs covering the ceiling
	// Water dripping from the ceiling
	
	// USE THE UV LIGHT FOR A PUZZLE
	
	// It all comes from his private lab
	// The greeneries grow out out the broken window into the hall
	// The UV lights keep the plants alive, so they don't need the sun, "And water? Well there is plenty of that."
	// He does need to turn the salt water into fresh water however, since the saltwater dries the plants, and eventually poisones them
	
	// In this lab the power will go out and the monster will appear, to only thing illuminating the room is the sample infused with the WAU.
	
	// A lone person runs this station.
	// Tell a secondary story of a team of 8 that came here to pick him up. (after the guy above died)
	
	// He is the monster here, and the same person in the terminal message below.
	// The player will learn of his experience living alone down there all in the name of some 'test'
	// He is not even aware of the fact that the world has ended, he suspects something when the other stations don't contact him weekly.
	// Write about how he likes taking care of his fish, they keep him busy
	// Write about how the ripples of the water on the walls make him sleep, in the late afternoons. 
	// Even though his sense of day and night is doesn't feel very natural since he sees no sun or moon, just a grumbling void.
	// Write about how he was taken on an expedition above the abyss, since sitting down there for too long is bad for his health. It was fun.
	// Write about how he likes listening to whales and studies them, he will eventually find the WAU that he's heard of from up top.
	// This is how he gets infected by it, a sample of crust from a whale.
	
	// Terminal message: "Please wait, [PERSON X] will be with you shortly." Then the player finds where PERSON X's body would have been, he's been turned into the monster.
	
	// "I found crew member. He's in a horrific state. I've never seen him before."
	// Some kind of organic specimen has, at first glance, appears to have invaded his body -- while true -- it appears to be doing something rather fascinating - supporting his polmunary circulation! 
	// "However, no response from clapping, and no verbal communication (Brain damage?). He's alive, but not?
	// "-- My neck still itches, cream didn't work. Is it too humid in here? Perhaps it's best too take a look at the system, it could be degrading. No one to help but myself."
	
	// Have an tiny aquarium in a waiting/commons room accompanied with lobby music play on a loop (with or without fish?)
	// Hole in glass, dead fish on the floor? It has become overgrown instead
	// The music can be turned off in a scary scene to make it creeply quiet, then turn it on again (maybe distort the song?)
	// A datapad with a recording of the aquarium before the chaos, fishes still alive (copy the aquarium, omnicron_outside camera method, update on play)
	
	// Suddenly 'fire suppressants' from the ceiling activate making a loud *Psh* noise, scaring the player
	// The lights turn off as well
	
	// Have the power reboot suddenly as the player is exploring, make it very silent, when the power is off
	
	// An alarm clock rings randomly as a scare, Terminal Gui for the clock, blue to red when it beeps
	
	// Scene (?) --
	// Deeper in the station
	// At a repair station, the player will insert the omnitool, a sound file will be recovered on software update, a dialog scene between Cath and Simon. One Cath saved for herself (cute).
        
        // Alien kitty cat scene, four holes in ceiling, water, chains, corpse hanging on chain (homage)
        // When player passes through chains do distant clammering
        // Use the vent line design for in front of lamps + along the wall

        // Room, table center, body (still alive), will move later and patrol halls, a voice transmission is on repeat, flickering lights
        // This located in the lab, there is a window into the medbay

	// "You fuckin' make it then, if you're so god damn smart." -Some dead person, probably
	
	//}/////////////

	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO - FALLING INTO THE ABYSS*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	// The Blue Lotus in Buddhism is the symbol of the victory of the spirit over the senses, of intelligence and wisdom, of knowledge. 
	// It is generally represented as a partially opened bud, whose center is unseen, the embodiment of the “perfection of wisdom”.
	// USE THIS ABOVE FOR SOME SYMBOLISM.
	// The scientist calls the wau clump from the whale the 'lotus'
	
	// USE SOUND OF A REAL BLACKHOLE WHEN AROUND THE ASTEROID AND THE OBELISK
	
	// IMPLEMENT SO WHEN THE PLAYER ENTERS AN AREA WITH HOT SMOKERS MAKE SUIT GO *BEEP* *BEEP* *BEEP* (EXACTLY THREE TIMES)
	// USE AREAS WITH RUN ON COLLIDE, SCRIPT IS EASILY REUSABLE
	// ALSO DO THIS BEEPING WHEN THE PLAYER ENTERS THE STORM
	
	// The slide until crashing in the rock and waking up
	// Play 03_01_omicron_outside/SFX/special/intro_sequence/camera_anim moments before crashing into the rock (stop sound on hit)
	// Play this too 03_01_omicron_outside/SFX/special/intro_sequence/camera_anim_vo 
	// Play sound above after Simon screams 'Fuck!' or something like that once he realizes his situation
	// Play Player/UI/blackout_hit when player hit their head
	
	// Copy the whole wake up sequence from the maintenance map
	// Run suit diagonistics (copy from maintenance map)
	// Before the player stands up you can see the guy that shows up from time to time in the abyss in the original game
	// Eye blink
	// Then stand up
	
	// The first immediate point of interest is the smoke coming from the crashed zeppilin
	// Simon emotes when spotting it
	
	// In an area where the storm is calm, find glowy abyss fish
	// Rocks fall down scaring the player
	// The player has to cross a field where the storm is stronger again, the player can get hit be rocks flying from right to left
	
	// ADD HELPER FUNCTION FOR SCARY MOMENTS, HEARTBEAT+BREATHING+EMOTE WITH CUSTOMIZABLE PARAMETERS
	
	// CHANGE COLOR FOR SUBTITLES AND CAPTIONS FROM WHITE TO A CALM YELLOW
	// ADD THE CHARACTER WHO IS SPEAKING + ADD EMOTIONAL CONTEXT --> Catherine (sarcastic): *SUBTITLE TEXT*
	
	// ADD A STAMINA SYSTEM TO MAKE THE PLAYER MORE CAUTIOUS OF THEIR MOVEMENT.
	// VFX WHEN STAMINA LOW, HEARTBEAT INCREASING THE LONGER PLAYER RUNS, HEAVY BREATHING
	// RUNNING SPEED IS CONSTANT -- STAMINA AMOUNT !!DOES NOT!! AFFECT RUNNING SPEED
	
	int mlBreathID;
	int mlHeartbeatID;
	int mlShakeID;
	int mlStormScreenEffectID = -1;
	
			// MUSIC CONTENDERS
			//
			// MUSIC FOR WHEN THE LIGHTNING SHOWS UP
			// 02_01_fleshervehicle
			// MUSIC FOR WHEN THE PLAYER WAKES UP
			// NPC_robotheadgirl_stalk
			// 02_04_storm
			
	void SetupIntro()
	{
		cLux_AddDebugMessage("!DO INTRO!");
		
		SequenceIntro("");
	}
	
	cSequenceStatesData mIntroClutterSequence;
	void SequenceIntroClutter(const tString &in asTimer)
	{
		// FINAL STEP FOR EACH STAGE HAS TO BE Sequence_DoStepAndPause()
		Sequence_Begin("SequenceIntroClutter", mIntroClutterSequence);
		if (Sequence_DoStepAndPause())
		{
			cLux_AddDebugMessage("!DO INTRO CLUTTER!");

			// Fall effects and sound
			AttachPlayerFallFx();
			Sound_CreateAtEntity("FallMovement", "Player/action/underwater/abyss_fall", "Player");
			
			// Storm
			UpdateStormScreenEffect();
			SetStormStrengthVisuals("tau_storm_med.ps", "tau_storm_dirt_med.ps", gvCurrentDir*3.5f, gfFogNormal, 0.0f);
			
			// Thunderstorm sound
			Map_AddTimer("StormAudio_Stage0_ThunderSweetener", 3.0f, "StormAudio_Stage0_Sweeteners");
			
			// Music
			Music_PlayExt("NPC_Creature_Attack", true, 0.75f, 1.0f, 7.5f, 0, eMusicPrio_SceneAmb, false);
			
			Effect_Fade_Out(0.0f);
		}
		else if (Sequence_DoStepAndWait(2)) // SLIDE STAGE 1
		{
			cLux_AddDebugMessage("!DO SLIDE STAGE 1 CLUTTER!");
			
			Effect_Rumble_Start(0.5f,1.0f,0.5,0.5f);
			
			Map_AddTimer("StormAudio_Stage0_ThunderSweetener", 6.0f, "StormAudio_Stage0_Sweeteners");

		}
		// ADD STAGE 1 STEPS IN BETWEEN HERE
		if (Sequence_DoStepAndPause())
		{
			cLux_AddDebugMessage("!FINAL STAGE 1 CLUTTER!");
		}
		else if (Sequence_DoStepAndWait(2)) // SLIDE STAGE 2
		{
			cLux_AddDebugMessage("!DO SLIDE STAGE 2 CLUTTER!");
			
			Effect_Rumble_Start(0.5f,1.0f,0.5,0.5f);
			
		}
		Sequence_End();
	}
	
	cSequenceStatesData mIntroSequence;
	void SequenceIntro(const tString &in asTimer)
	{
		Sequence_Begin("SequenceIntro", mIntroSequence);
			
		if (Sequence_DoStepAndWait(5))
		{
			cLux_AddDebugMessage("!DO INTRO!");
			
			Map_SetSkyBoxColor(cColor(gvPreIntroSkyBoxColor));
			
			// Player
			Player_SetHealth(0.7f);
			
			// Flashlight ON to create sense of motion
			Player_SetFlashlightActive(true, true);
			Player_SetFlashlightDisabled(true);
			
			// Run intro clutter
			SequenceIntroClutter("");
		}
		else if (Sequence_DoStepAndPause())
		{
			// Make this fall shorter in time
			StartPlayerFallFx();
			StartFallAnim("Fall1", 0.65f, 0.7f);
		}
		else if (Sequence_DoStepAndWait(2))
		{
			cLux_AddDebugMessage("Slide stage 1 complete.");
		}
		else if (Sequence_DoStepAndPause())
		{
			Map_SetSkyBoxColor(cColor(0,0,0,0));
			
			StartFallAnim("Fall2", 0.75f, 0.8f);
			
			Music_PlayOverlay("", 1.0f);
		}
		else if (Sequence_DoStepAndWait(2))
		{
			cLux_AddDebugMessage("Slide stage 2 complete.");
		}
		else if (Sequence_DoStepAndPause())
		{
			// This code runs when the player hits their head on the rock
		}
		
		// Before crashing the player flies through wall of fog particles simulating the storm, then once on the other side *donk*
		
		// After player hits head on rock (Add Simon damage vo), also add screen cracks on screen
		// Lower hp more when crash on land
//		if (Player_GetHealth()>0.7f)
//				Player_SetHealth(0.35f);
		// Screen is black, distant thunder, Cath saying something (sfx over her voice), then screen and sound fades back in, the storm has started
		// Play Player/UI/blackbox_sonar once in silence, then moments before wake up as world sfx fades in
		// Also play Player/UI/death_tinnitus, fade it out over time
		// Suit diagonostics start when the screen fades back in *beep* *boop* *beep* *boop*
		
		// When Simon stands up play Player/camera_anim/underwater/abyss_recover/vo
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
		bool SlideFade(const tString &in asEntity, int alDirection)
	{
		Effect_Fade_Out(0.01f);
		Sound_Fade("FallMovement", 0.35f, 0.1f);
//		Sound_Stop("FallMovement", 0.01f);
		
		Emotion_StopBackgroundBreath(mlBreathID);
		Emotion_StopHeartbeat(mlHeartbeatID);
		return true;
	}
	
	bool SlideStageComplete(const tString &in asEntity, int alDirection)
	{
		SequenceStates_Resume("SequenceIntro");
	
		SlideFade(asEntity, alDirection);
	
		return true;
	}
	
	//-------------------------------------------------------
	
	void StartFallAnim(const tString&in asName, float afHeartbeatTime, float afFearLevel)
	{
		Effect_Fade_In(0.01f);
		// Do *voom* sound effect here
		Sound_Fade("FallMovement", 1.0f, 0.01f);
		
		SequenceStates_Resume("SequenceIntroClutter");
		
		// Panicking!
		mlHeartbeatID = Emotion_StartHeartbeat(afHeartbeatTime,0.75f,1, -1, 1.0f, 1.0f);
		// Stop breathing when playing dialogue
		mlBreathID = Emotion_StartBackgroundBreath(eBreathType_Fear, afFearLevel*2, 1, -1, 1.0f);
		
		CameraAnimation_End();
		CameraAnimation_Begin(asName,"", false);
		AttachPlayerFallFx();
		
		cLux_AddDebugMessage("!!Starting new slide stage!!");
	}
	
	void StartPlayerFallFx()
	{
		ParticleSystem_CreateAtEntityExt
			("PlayerBubblesPS", "loop_waterbubbles_large_cloud.ps", "IntroParticleArea", true, cColor(1,1,1,0.5), 0.1f);
			
		for(int i = 1; i <= 4; i++)
		{
			ParticleSystem_CreateAtEntityExt
				("PlayerMotionLinesPS", "tau_storm_static_large.ps", "PlayerMotionLinesArea_"+i, true, cColor(1,0.936,0.836,0.508), 0.5f);
		}
	}
	
	void AttachPlayerFallFx()
	{
		CameraAnimation_SetAttachedEntity("IntroParticleArea", false, false, false);
		Entity_AttachToEntity("PlayerMotionLinesArea_*", "IntroParticleArea", "", false);
	}
	
	//-------------------------------------------------------
	
	bool ChangeCurrentDirection(const tString &in asEntity, int alDirection)
	{
		// Change current direction here
		
		// Fall motion lines direction
		
		// Environmental particles wind direction
		return true;
	}
	
	//-------------------------------------------------------
	
	cVector3f mvStormParticleVel=cVector3f_Zero;
	float mfStormFogEnd=gfFogNormal;
	tString msStormParticles;
	tString msStormDirt;
	
	int mlStormStrength = 0;
	
	void SetStormStrengthVisuals(const tString &in asStormParticles, const tString &in asStormDirt, 
		const cVector3f avParticleVelocity, float afFogEnd, float afFadeTime)
	{
		msStormParticles = asStormParticles;
		msStormDirt = asStormDirt;
		
		if (mlStormStrength != 0) 
		{
			ParticleSystem_Destroy("Storm");
			ParticleSystem_Destroy("StormDirt");
		}
		if (asStormParticles != "") 
		{
			ParticleSystem_CreateAtEntityExt("Storm", asStormParticles, "IntroParticleArea", 
				true, cColor_White, gfParticleAlpha, true, 0.3, 0.75);
			ParticleSystem_CreateAtEntityExt("StormDirt", asStormDirt, "Camera", 
				true, cColor_White, 0.25f, false, 0, 0);
		}
		Map_FadeFogEnd(afFogEnd, afFadeTime);
		Map_FadeEnvironmentParticleWindVelocity(gvStage1CurrentDir*6.5f, afFadeTime);
		
		
		mvStormParticleVel = avParticleVelocity;
		mfStormFogEnd = afFogEnd;
	}
	
	//-------------------------------------------------------
	
	void UpdateStormScreenEffect()
	{
		if (mlStormScreenEffectID == -1)
		{
			mlStormScreenEffectID = Effect_Screen_Start("storm_refraction.mat", cVector2f(0.5, 0.5), 
										cVector2f(1.8, 1.8));
			Effect_Screen_FadeAlpha(mlStormScreenEffectID, 1.0f, 0.4f);
		}
	}
	
	//-------------------------------------------------------
	
	void FadeStormScreenEffect()
	{
		if (mlStormScreenEffectID != -1)
		{
			Effect_Screen_FadeOut(mlStormScreenEffectID,0.4f);
			mlStormScreenEffectID = -1;
		}	
	}
	
	//-------------------------------------------------------
	
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // XX
    /////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_01_XXX.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	//}-------------------------------------------------------
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////
	// STORM AUDIO
	//{///////////////////////////////////////
	
	void StormAudio_Stage0_Sweeteners(const tString &in asTimer)
	{
		if(asTimer == "StormAudio_Stage0_ThunderSweetener")
		{
			//Trigger thunder and duck storm 
			cLux_AddDebugMessage("Stage 0 Thunder triggered");
			Sound_CreateAtEntity("StormAudio_Stage0_Thunder", "04_01_tau_outside/AMB/storm/thunder/stage_0", "Player", 0.0f, false, 1.0f);

			//Start timer for thunder again, fade up storm on release
			Map_AddTimer("StormAudio_Stage0_ThunderSweetener", cMath_RandRectf(25.0f,35.0f), "StormAudio_Stage0_Sweeteners");
		}
	}
	
	//}-------------------------------------------------------
	
	void AudioManager()
	{
		
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}
