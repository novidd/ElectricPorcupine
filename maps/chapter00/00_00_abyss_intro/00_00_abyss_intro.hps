#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
const float gfDofMax = 3.0f;

const float gfFogNormal = 45.0f;

const float gfDirLightOutsideBrightness = 0.1f;
const float gfDirLightInsideBrightness = 0.05f;

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	int mlDofID = -1;
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		// Gui
		OmnitoolGui_Preload();
		
		// Player hands
		PlayerHands_PreloadHandModel_Diving();
		
		// Particles
		ParticleSystem_Preload("");
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		//GetBase().SetDisplayNameEntry("00-00-XXX");

//		Effect_Bloom_FadeBrightPass(0.00001, 0); //sets pixels over 127 (255 * 0.5) to add to bloom
//		Effect_Bloom_FadeBloomWidth(160, 0); //sets 128 pixels in bloom width, looks best within 32 - 512 pixels.
//		Effect_Bloom_FadeBloomTint(0.3, 0.3, 0.3, 0); //sets red tint to bloom
//		
//		Effect_DoF_Start(0, 12, 1.0f, 0);

		mlDofID = Effect_DoF_Start(0.0f, gfDofMax, 0.5, 0.0);
		
		Effect_Bloom_FadeBrightPass(0.00001, 0);
		Effect_Bloom_FadeBloomWidth(64, 0);
		Effect_Bloom_FadeBloomTint(0.6, 0.4, 0.4, 0);
		Map_SetUnderwater(true);
		Map_FadeFogEnd(gfFogNormal, 0.0f);
		Effect_RadialBlur_SetDirect(0.1, 0.75, 0.1);
		
		cLux_GetCurrentMap().GetWorld().SetFogUnderwater(true);
		
		//////////////////////
		//Level start
		CathTool_ResetScreen(eCathToolVariant_CathDelta);
		CathTool_Insert("CathTool", "ZeppelinCathTerminal", false);
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		bool bDoIntro = true;
		
		/////////////////////////
		// Player setup
//		Player_SetAmbientLight_Outdoors();
		PlayerHands_SetHandModel_Diving();
		
		PlayerEnergy_SetFlowerSwallows(true);
		
		//Map setup
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
//			bDoIntro = false;
		}
		
		if (bDoIntro)
		{
			SequenceIntro("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Map_SetUnderwater(true);
		
//		Map_AddTimer("TimerStartPreload",10.0f,"TimerStartPreload");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Player_SetHealth(0.65f);
		}
		
		if(alAction == eAction_Test2)
		{
			// Do damage on crash
			Player_GiveDamage(0, 0, eDamageType_Hit, "");
//			Player_MoveHeadPos(cVector3f_Down*0.375, 9, 4, 0);
			Depth_Audio_PlayerTakeDamage();
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
 
	//} END MAIN CALLBACKS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	//} END Critters
	
	///////////////////////////////
	// Generic timers
	//{////////////////////////////
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void Timer_RemoveParticleSystem(const tString &in asTimer)
	{
		ParticleSystem_Destroy(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//} END Generic timers

	//} END MAIN FUNCTIONS
	
		// Link 01_03_robotreaction1 and 01_03_robotreaction2 together - play 01_03_robotreaction2 first then 01_03_robotreaction1 (Up and down effect)
	// 02_04_stormends when the player wakes up
	
	// Zepplin code: 049
	
//		// Do damage on leviathan pick up
//		Player_GiveDamage(1, 0, eDamageType_Hit, "");
//		Player_MoveHeadPos(cVector3f_Down*0.375, 9, 4, 0);
//		Depth_Audio_PlayerTakeDamage();
	
	// Mod premice --
	// This mod plays on the idea that there are multiple Simons in the world
	// Two "alive" Simons will communicate in the final scene in the mod (The other Simon is the original game one in Phi).
	// All of the corpses that the player has passed throughout the mod are other Simons.
	// They're all stuck in a loop, in control by the WAU for life to survive by any means necessary.
	
	// -- IDEAS --
	// The player will lose their part of their arm just like in the original game (before the suicide, in the station)
	// When the player has stood to close to the rave for too their suit starts to beep (red around screen at beep)
	// Katebot will go deep into the abyss to repair something, on a terminal the player can see Katebot's position moving (green circle)
	// The signal is cut off (the cirlce no no longer moves/or disappears). The player finds Katebot destroyed or covered in rocks
	// Use 01_03_upsilon_outside/katebot/kate_trapped_alarm to locate Katebot more easily
	// In a later scene Katebot has to sacricife herself so the player can proceed forward.
	
	// Map: 00_00_abyss_forest
	
	// Scene 1 --
	// Map starts with the player flying through a strong underwater current (Omicron outside pipe animation)
	// They crash on the ground, stand up
	// Player wanders aimlessly in the abyss, eventually finds the obelisk
	
	// 04_01_tau_outside/SFX/near_death on obelisk interact
	// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
	
	// Leviathan shows up
	// Black screen

	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *FALLING INTO THE ABYSS*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	int mlBreathID;
	int mlHeartbeatID;
	int mlShakeID;
	
	cSequenceStatesData mIntroSequence;
	void SequenceIntro(const tString &in asTimer)
	{
		Sequence_Begin("SequenceIntro", mIntroSequence);
			
		if (Sequence_DoStepAndWait(4))
		{
			cLux_AddDebugMessage("!DO INTRO!");
			
			Player_SetHealth(0.7f);
			
			// Flashlight ON to create sense of motion
			Player_SetFlashlightActive(true, true);
			Player_SetFlashlightDisabled(true);
			
			Effect_Rumble_Start(0.5f,1.0f,0.5,0.5f);
			
			AttachPlayerFallFx();
			
			Sound_CreateAtEntity("FallMovement", "Player/action/underwater/abyss_fall", "Player");
			
			CameraAnimation_Begin("Fall1", "", false);
			
//			mlHeartbeatID = Emotion_StartHeartbeat(0.75f,0.75f, 1, -1, 1.0f, 1.0f);
//			mlBreathID = Emotion_StartBackgroundBreath(eBreathType_Fear,0.5f, 1, -1, 1.0f, 1.0f);
			
			// Omicron descent directional light properties at start than fade to main map settings later
			
			// Screen fades in and out throughout the fall
			// The player rolls around as they falls straight down, they get glimpses of the cliff side, with life like plants and such
			
			// When the player is going to collide with a rock wall, fade the screen in just before the redirection
			// Simon emotes right before the screen goes to black
			// Then fade back in after the current has pulled the player to the side
			// Manilpulate the game sound each time the screen fades in and out (as if covering your ears (fade out), then letting go (fade in))
			
			// At the of the slide the player is still at an apex, music fades out, lighthing strikes, then the player continues to fall, music fade in
			// Then fall toward the rock and *donk*
			
			// Sand particle effects on screen when falling down or toward a current (like in tau_outside when in the storm)
			
			// Play 02_07_theta_exit_a/SFX/flood_sequence/breach/FloodSequence_BuildUp before screen fades in (~3s)
			
			// Then play 02_07_theta_exit_a/SFX/flood_sequence/breach/FloodSequence_WaterHits
			// Player/action/underwater/abyss_fall can also be used for the fall
			
			// Do distant lighting as the player falls
			
			// Play 03_01_omicron_outside/SFX/special/intro_sequence/camera_anim moments before crashing into the rock (stop sound on hit)
			// Play this too 03_01_omicron_outside/SFX/special/intro_sequence/camera_anim_vo 
			// Play sound above after Simon screams 'Fuck!' or something like that once he realizes his situation
			
			// Convey motion underwater with some form of motionlines (attach to player)
			// The storm wind particles??
			
			// The player falls along the cliff which goes below Theta
			// As the player falls change
			
			// Set the skybox off when the player is in entering the abyss Map_SetSkyBoxActive(false);
			// Also change the properties of the environmental particles when the player get caught in the current
			
			// Edit the fogs properites so the player can see the distant lightning being struck

			// Play Player/UI/blackout_hit when player hit their head

		}
		else if (Sequence_DoStepAndWait(2))
		{
			StartPlayerFallFx();
			//StartFallAnim("Fall1", 0.65f, 0.7f);
		}
		
		// After player hits head on rock (Add Simon damage vo), also add screen cracks on screen
		// Lower hp more when crash on land
//		if (Player_GetHealth()>0.7f)
//				Player_SetHealth(0.35f);
		// Screen is black, distant thunder, Cath saying something (sfx over her voice), then screen and sound fades back in, the storm has started
		// Play Player/UI/blackbox_sonar once in silence, then moments before wake up as world sfx fades in
		// Also play Player/UI/death_tinnitus, fade it out over time
		// Suit diagonostics start when the screen fades back in *beep* *boop* *beep* *boop*
		
		// When Simon stands up play Player/camera_anim/underwater/abyss_recover/vo
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void StartPlayerFallFx()
	{
		ParticleSystem_CreateAtEntityExt
			("PlayerBubblesPS", "loop_waterbubbles_large_cloud.ps", "PlayerBubblesArea", true, cColor(1,1,1,0.5), 0.1f);
			
		for(int i = 1; i <= 4; i++)
		{
			ParticleSystem_CreateAtEntityExt
				("PlayerMotionLinesPS", "tau_storm_static_large.ps", "PlayerMotionLinesArea_"+i, true, cColor(1,0.936,0.836,0.508), 0.5f);
		}
	}
	
	//-------------------------------------------------------
	
	void AttachPlayerFallFx()
	{
		CameraAnimation_SetAttachedEntity("PlayerBubblesArea", false, false, false);
		Entity_AttachToEntity("PlayerMotionLinesArea_*", "PlayerBubblesArea", "", false);
	}
	
	//-------------------------------------------------------
	
	void StartFlushAnim(const tString&in asName, float afHeartbeatTime, float afFearLevel)
	{
		Effect_Fade_In(1.0f);
		
		// Panicking!
		mlHeartbeatID = Emotion_StartHeartbeat(afHeartbeatTime,0.75f,1, -1, 1.0f, 1.0f);
		mlBreathID = Emotion_StartBackgroundBreath(eBreathType_Fear, afFearLevel, 1, 1.0f, 1.0f);
		
		CameraAnimation_End();
		CameraAnimation_Begin(asName,"", false);
		AttachPlayerFallFx();
		
		cLux_AddTodoMessage("SOUND: Fade in player struggling as carried through through water flow");
	}
	
	//-------------------------------------------------------
	
	bool OnFlushFade(const tString &in asEntity, int alDirection)
	{
		Effect_Fade_Out(1.0f);
		
		Emotion_StopBackgroundBreath(mlBreathID);
		Emotion_StopHeartbeat(mlHeartbeatID);
			
		cLux_AddTodoMessage("SOUND: Fade out player struggling as carried through through water flow");
		Sound_Stop("TEMPFLOOD", 8.0f);
						
		return true;
	}
	
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // XX
    /////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_01_XXX.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioManager()
	{
		
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}