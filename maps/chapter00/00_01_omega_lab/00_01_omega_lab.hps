
#include "interfaces/Map_Interface.hps"
#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

#include "player/Player_Types.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Effect init
		Effect_Bloom_FadeBrightPass(0.65f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		PlayerHands_PreloadHandModel_DeepSea();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Player setup
		Player_SetAmbientLight_Indoors();
		PlayerHands_SetHandModel_DeepSea();
		
		Player_SetFlashlightDisabled(true);
		
		/////////////////////////
		// Level setup
		//Map_Preset_Fade("Ocean", 0.001f);
		
		bool bDoIntro = true;
		
		Player_SetHealth(0.75f);
		
		////////////////////
		//Audio
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			bDoIntro = false;
			
			Player_SetFlashlightDisabled(false);
			
			//Effect_Fade_In(1);
			//Sound_FadeGlobalVolume(1.0f, 1.0f);
			//Sound_FadeGlobalVolume(1.0f, 1.0f, eSoundEntryType_GuiAll);
		}
		
		if (bDoIntro)
		{
			Effect_Fade_Out(0);
			Sound_SetGlobalVolume(0.0f, eSoundEntryType_WorldAll);
			Sound_SetGlobalVolume(0.0f, eSoundEntryType_GuiWorld);
			
			//Map_AddTimer("timer_kickoffintro", 0.01, "TimerKickoffIntro");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		//Player_SetFlashlightDisabled(false);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		// Do elevator tremors here
		UpdateElevatorTremors(afTimeStep);
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Lamp_SetLit("preairlock_*", false, false);
		}
		
		if(alAction == eAction_Test2)
		{
			Lamp_SetLit("elevatorshaft_power_elevatorlamp_*", false, false);
			ParticleSystem_SetBrightness("elevatorlamp_ps", 0.0f);
			LensFlare_SetVisible("elevatorlamp_flare_*", false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// TA: TremorsAllowed, TUE: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		ImGui_DrawFontW("TA: " + mbTremorsAllowed + ", TUE: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Elevator Shaft Tremors
	///////////////////////////////
	
	bool mbPlayerInElevatorShaft;
	bool mbElevatorPowerOn = true;
	bool mbTremorsAllowed = true;
	
	float mfTimeRunTremor = cMath_RandRectf(4.35f, 11.5f);
	float mfTremorCounter = 0;
	
	void UpdateElevatorTremors(float afTimeStep)
	{
		if (mbTremorsAllowed)
		{
			mfTremorCounter+=afTimeStep;
			
			if (mfTremorCounter >= mfTimeRunTremor)
			{
				cLux_AddDebugMessage("Start tremor event");
				
				mfTimeRunTremor = cMath_RandRectf(16.10f, 32.f);
				mfTremorCounter = 0;
				
				// level_amb_shared_interior/amb/sfx/metal/metal_groan_heavy_quieter
				// level_amb_shared_interior/amb/sfx/metal/metal_groan_heavy
				// level_amb_shared_interior/amb/sfx/metal/metal_groan_deep_fat
				
				Sound_CreateAtEntity("ElevShaftGroan", "level_amb_shared_interior/amb/sfx/metal/metal_groan_clear", "ElevatorShaftGroan");
				
				// After shock rattling on timer
				
				// Do dust sound effect on timer
				
				// Always make the red guidelighs flicker even if power off
				
				// Made the lights flicker if elevator shaft power on
				if (mbElevatorPowerOn)
				{
					
				}
				// If player in elevator shaft then do shake/sway effects
				if (mbPlayerInElevatorShaft)
				{
					cLux_AddDebugMessage("Player in elevator shaft");
				}	
			}
		}
	}
	
	bool OnCollide_PlayerInElevatorShaft(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbPlayerInElevatorShaft = alState == 1;
		
		return true;
	}
	
	///////////////////////////////
	// Checkpoints
	///////////////////////////////
	
	//-------------------------------------------------------
	
	//} END MAIN FUNCTIONS
 
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
	/////////////////////////////////////////
	// *Brandon wakes up in the bottom of the elevator shaft*
	//{//////////////////////////////////////
		
	//-------------------------------------------------------
		
	cSequenceStatesData mSequenceWakeUpStartState;
	void SequenceWakeUpStart(const tString &in asTimer)
	{
		Sequence_Begin("SequenceWakeUpStart", mSequenceWakeUpStartState);
		
		if (Sequence_DoStepAndWait(4.0f))
		{
			cLux_AddDebugMessage("!! STARTING WAKE UP!!");
				
			Player_Teleport("Start_WakeUp");
			Player_SetHealth(0.65f);
			
			Sound_FadeGlobalVolume(0.0f, 0.1f, eSoundEntryType_WorldAll);
			
			//Sound_FadeGlobalVolume(0.2f, 0.1f, eSoundEntryType_GuiWorld);
			//Sound_FadeGlobalVolume(0.0f, 1.0f, eSoundEntryType_WorldAll);
			
			// CATHERINE SPEAKS TO SIMON IN DARKNESS WHEN THEY'RE FINISHED WITH THE SCAN
			
			// Radial blur and imagetrail so catherine lamp lasts for several frames on screen
			
			// "01_01_interact_wauflower.ogg" - Screen back till waking up (on stinger open eyes) Fade in after 4-5 seconds
			
			// START CAMERA ANIMATION
			
			// The spinning of a fan
			// 02_07_theta_exit_a/SFX/flood_sequence/flush_valve_klaxon loop in the background
			
			// PLAYER BLINKS -> LOOKING AT FAN  ORIGAMI ROTATE AND DANGLE
			// PLAYER BLINKS -> ORIGAMI GONE -> DISTANT METRO SCORPION LIKE NOISES
			// PLAYER BLINKS -> LOOKING AT FLOOR, PLAYER CAN NOW MOVE
			
			// Distant lights off - 05_01_phi_inside/SFX/spacegun_sequence/shutdown_lights
			// After turn off 02_07_theta_exit_a/SFX/flood_sequence/flush_valve_klaxon
			
			// GIVE A HINT IF THE PLAYER DOESN'T MOVE AFTER A CERTAIN AMOUNT OF TIME
			
			// MUSIC CONTENDERS FOR PLAYER WAKE AFTER INTRO
			// "01_01_interact_wauflower.ogg"
			// "01_01_lightsout.ogg" - Discovering the bodies
			// "01_01_talking_door.ogg" - Distant noise	
			
			// When player has full control - 03_02_omicron_inside/SFX/sweetener/enter_start_room
		}
		else if (Sequence_DoStepAndWait(0.0f))
		{
			Effect_Fade_In(3.0f);
		}
		Sequence_End();
	}
		
	// START LOW LEVEL MUSIC FOR THE SILENCE UNTIL THE COMPUTER LIGHT IS REVEALED
				
	// THE SOUND OF A THE LEGACY COMPUTER EVENTUALLY BOOTS UP BEHIND THE PLAYER ALONG WITH ALL THE LIGHTS
				
	// 02_05_theta/sfx/soma_terminal/soma_start
	// 02_05_theta/sfx/soma_terminal/soma_loop
	// 02_05_theta/sfx/soma_terminal/soma_stop
				
	//-04_03_tau_escape/SFX/ross/conversation/tunnel/start
	//-04_03_tau_escape/SFX/ross/conversation/tunnel/loop
	//-04_03_tau_escape/SFX/ross/conversation/tunnel/stop
				
	// soma_1_001_catherine_001
	// soma_2_001_catherine_001
	// soma_3_001_catherine_001
	// soma_4_001_catherine_001
				
	// Catherine says these lines one after another (still need to edit them)
	// All voice lines have a lower pitch (deep voice)
	// The end of her final voice line "melts"--gets lower pitch like its corrupted
				
	// GIVE A HINT IF THE PLAYER DOESN'T MOVE AFTER A CERTAIN AMOUNT OF TIME
				
	// MUSIC CONTENDERS FOR PLAYER WAKE AFTER INTRO
	// "01_01_interact_wauflower.ogg"
	// "01_01_lightsout.ogg" - Discovering the bodies
	// "01_01_talking_door.ogg" - Distant noise	
	
	//-------------------------------------------------------
	
	bool mbFirstTimeOpenMaintenanceBulkhead = true;
		
	void MaintenanceBulkStateChange(const tString &in asEntity, int alState)
	{
		cLux_AddDebugMessage("Maintenance Door State: "+alState);
		
		if (alState == 1 && mbFirstTimeOpenMaintenanceBulkhead)
		{
			mbFirstTimeOpenMaintenanceBulkhead = false;
			Map_AddTimer("", 3.0f, "OnTimer_DistantMonster");
		}
	}
	
	void OnTimer_DistantMonster(const tString &in asTimer)
	{
		// Ontimer play distant monster noise
	}
	
	void MaintenanceFearSound(const tString &in asTimer)
	{
		Depth_Audio_Fear_MediumIntensity();
	}
	
	//-------------------------------------------------------
	
	//} End Brandon wakes up in the bottom of the elevator shaft
		
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

		//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Terminal *TERMINAL X*
		//{//////////////////////////////////////
		
		//-------------------------------------------------------
	
		/*Put any variables that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		/*Put any functions that are only used Terminal here.*/
	
		//-------------------------------------------------------
	
		//} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	//-------------------------------------------------------
	
	//} END AUDIO
}