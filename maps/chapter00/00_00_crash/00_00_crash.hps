#include "interfaces/Map_Interface.hps"
#include "base/InputHandler_Types.hps"
#include "base/RichPresenceHandler_Types.hps"

#include "helpers/helper_game.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"

#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_audioplayback.hps"
#include "helper_imgui_station_app_photoviewer.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_basics.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"
#include "helper_custom_depth_ai_fleshers.hps"
#include "helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"

#include "custom_depth/helper_custom_depth_audio.hps"

#include "helper_font.hps"

//--------------------------------------------------
 
const float gfDofMax = 3.0f;

const float gfFogNormal = 100.0f;
const cVector3f gvIndoorWindVelocity = cVector3f(0.02, 0.02, 0.05);
const cVector3f gvStormWindVelocity = cVector3f(0.75, 0, -1)*6.5f;

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	int mlDofID = -1;
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		mlDofID = Effect_DoF_Start(0.0f, gfDofMax, 0.5, 0.0);
		
		Effect_Bloom_FadeBrightPass(0.00001, 0);
		Effect_Bloom_FadeBloomWidth(64, 0);
		Effect_Bloom_FadeBloomTint(0.6, 0.4, 0.4, 0);
		Map_SetUnderwater(true);
		Map_FadeFogEnd(gfFogNormal, 0.0f);
		Effect_RadialBlur_SetDirect(0.1, 0.75, 0.1);
		
		cLux_GetCurrentMap().GetWorld().SetFogUnderwater(true);
		
		//////////////////////
		//Level start
		CathTool_ResetScreen(eCathToolVariant_CathDelta);
		CathTool_Insert("CathTool", "ZeppelinCathTerminal", false);
	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		// Gui
		OmnitoolGui_Preload();
		
		// Player hands
		PlayerHands_PreloadHandModel_Diving();
		
		// Particles
		ParticleSystem_Preload("");
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		bool bDoIntro = true;
		
		/////////////////////////
		// Player setup
//		Player_SetAmbientLight_Outdoors();
		PlayerHands_SetHandModel_Diving();
		
		PlayerEnergy_SetFlowerSwallows(true);
		
		//Map setup
		SetupZeppelinCrash();
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
//			bDoIntro = false;
		}
		
		if (bDoIntro)
		{
			SetupIntro();
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		Map_SetUnderwater(true);
		Player_SetFlashlightEnvParticleMul(16);
		Map_SetUnderwater(true);
		
		//Game_AutoSave();
		
//		Map_AddTimer("TimerStartPreload",10.0f,"TimerStartPreload");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		cVector3f vToLanding = Map_GetEntity("ZeppelinPlatform").GetPosition() - 
								mvLandingPos;
		mfDistToLanding = vToLanding.Length()-0.2f;
		if (mfTotalDistToLanding==-1.0f)
			mfTotalDistToLanding = mfDistToLanding;
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			
		}
		
		if(alAction == eAction_Test2)
		{
			
		}
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
	
	//-------------------------------------------------------
	
	tString msMessageText = "";
	float mfMessageTimer = 0.0f;
	
	void DrawText(const tString asString, float afTime = 2.0f)
	{
		msMessageText = asString;
		mfMessageTimer = afTime;
	}
	
	void OnGui(float afTimeStep)
	{
		if (cLux_ScriptDebugOn() == false) return;
		
		cImGuiFont textLineFont;
		textLineFont.mvSize = ImGui_NrmSizeKeepRatio(0.02f);
		textLineFont.mColor = cColor(1.0f, 1.0f, 0.0f, 1.0f);
		// ETA: mbElevatorTremorsAllowed, TUT: TimeUntilTremor, PIES: PlayerInElevatorShaft, 
		//ImGui_DrawFontW("ETA: " + mbElevatorTremorsAllowed + ", TUT: " + (mfTimeRunTremor - mfTremorCounter) + ", PIES: " + mbPlayerInElevatorShaft, textLineFont, ImGui_NrmPos(0.72f, 0.95f, 0.1f), eFontAlign_Left);
		
		if (mfMessageTimer > 0.0f)
		{
			mfMessageTimer -= afTimeStep;
			
			cImGuiTextFrameData textData;
			textData.mColorBase = cColor(0.0f, 0.0f, 0.0f, 0.0f);
			textData.mFont.mvSize = cVector2f(20.0f, 20.0f);
			textData.mFontAlign = eFontAlign_Center;
			
			ImGui_DoTextFrameExt(msMessageText, cVector2f(0.0f, 0.0f), 0.0f, 0.0f, textData, cVector3f(0.0f, ImGui_GetSize().y / 2.0f, 1.0f), cVector2f(ImGui_GetSize().x - 450.0f, 500.0f));
		}
	}
 
	//} END MAIN CALLBACKS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////
	// Diving suit
	//{////////////////////////////
	
	bool OnCollide_DivingSuitUpdate(const tString &in asParent, const tString &in asChild, int alState)
	{
		cLux_AddDebugMessage(Entity_GetVarString(asChild, ""));
		
		// USE ENUMS
		// States
		// InStorm
		// InStation
		// LeaveStorm
		// EnterStorm
		
		// Nest in an update function
		// Create a whole module just for this functionality to easily use across different maps
		
		// Make the suit do beeping and booping noises when it updates
		
		return true;
	}
	
	//} END Diving suit
	
	///////////////////////////////
	// Checkpoints
	//{////////////////////////////
	
	//} END Checkpoints
	
	///////////////////////////////
	// Critters
	//{////////////////////////////
	
	//} END Critters
	
	///////////////////////////////
	// Generic timers
	//{////////////////////////////
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void Timer_RemoveParticleSystem(const tString &in asTimer)
	{
		ParticleSystem_Destroy(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffLamp(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//} END Generic timers

	//} END MAIN FUNCTIONS
	
	//{ OLD NOTES ----
	
	// Scene 2 --
	// Music: 04_01_village (while wandering in the abyss)
	// 04_01_stormstart for long scary moment (when the player is walking in the kelp forest)
	// The storm (lightning) is in the background
	
	// level_amb_shared_underwater/amb/spots/scary/ for scary sounds in the cave
	// Play level_amb_shared_underwater/amb/spots/metal/binaural_roof_screech when approaching Wau (still works in a cave)
	
	// Leviathan passes 04_01_tau_outside/SFX/leviathan_sighting_001
	
	// Located at the bottom of the trench beside the cliff which at the top leads to Theta.
	// The crash is in the trench between Delta and Theta, therefore the storm is quieter here.
	// The player has crashed in a kelp forest (it's slanted to proceed deeper and deeper).
	
	// The crash site is in a small clearing.
	// Make into a proper crash site
	
	// There are points of interest that move the player in the right direction (lights and small stations and stuff).
	// Have an angler fish(es) in the forest
	
	// The station's back entrance gets revealed on the other end if the forest
	// The storm is blowing hard here 
	
	// -- MAIN PUZZLE --
	
	// Do light cracking and heavy breathing and heartbeat sound effects because the player is deep in the ocean trench on a timer
	// Use different stages depending on how deep in the level the player is. Use collide areas that set the enum for this.
	
	// Player is laying on their back after zepplin has crashed (set low hp).
	
	// Play the dialogue as the colorful jellyfish pass the screen.
	
	// The beeping of cutebot can be heard in the background. (CREATE NEW ENTIY kate_some_abyss and tweak settings so it looks good in the dark)
	// Screen fades in, cutebot is looking at the the player (she talks to the player).
	// Dialogue is still running
	// When the dialogue ends, the screen fades out then in again (blink), player starts to stand up.
	
	// (THE PLAYER DOES NOT SPAWN BY THE RAVINE)
	// The player getsdragged into some small nest in a cave
	// Distant fishes can be seen in the distance (attracted to light of something the player will go to later, the fishes are then gone cus storm)
	// The storm is raving outside (thunder strikes in the background)
	// At the nest enterance cutebot arrives
	// You can see cutebot looking at the player (the storm particles fly past her)
	// Cutebot har arrived on time and attacks the tentacle (with her welder torch)
	
	// Later in the story when Kate and Simon are in the storm, Kate gets hit by a rock and crashes (inspect code for killing Kate in Delta)
	
	// The storm is in full force
	// Cutebot escorts the player forward to the crashsite
	// Cutebot goes round and round where Cath is
	
	// Cutebot escorts the player to the station which is by the abyss forest (field)
	// The player will realize upon interacting with stuff in the this area that he needs the omnitool
	
	// The cutebot guide the player forward into the abyss
	
	// The player needs to go to a suit recharge station, there the player can rest from the abbys and continue on later with a deep diving suit.
	
	// Use Intercom_Pedersen_1 when using the communications terminal
	
	// Scene 2 --
	// The station is placed at the edge of the valley is opening (the player came from the caverns)
	
	// Here the player can retrieve data from the omnitool (a dialogue scene between Simon and Cath she has saved, cute)
	// Simon comments on this
	
	// The player enters the backend of the station
	
	// The whole station is fucked nothing works
	// He pulls a power switch on lever falls off, Simon comments on that he doesn't even care anymore
	
	// Simon loses his hope (phi omega space gun dialogue will probably work well here)
	// This is why he decides to walk into the storm as a final "fuck this" (this is suicide -- actually pretty dark wtf I didn't even realize that)
	
	// In station tower (TVS-h) after crash read text (console) conversation about someone who almost fell down into the abyss.
	// Make this conversation show up on screen line after line.
	// Function parameters: 
	// (const tString &in asTextCategory, const tString &in asTextEntry (maybe use a suffix+prefix system), float afMsgTimestamp, float afMsgDelay)
	// Other person makes a joke. The other types "fuck off not funny", and understandably so.
	
	// A: Hello and good morning *station*, you there B?
	// B: of course, and as natural, things are covered in perpetual darkness
	// A: How's your legs, still shaking?
	// B: ha good one
	// B: i was just starting to feel good about myself
	// A: I'm glad I always crash the party
	
	// A: Anyway
	// A: Yeah my dad used to do that to me
	// B: really?
	// A: Yeah
	// (longer delay)
	// B: fuck off
	// A: Yeah, thanks. 
	// A: I will.
	// B: if only you could get out of that suit
	// A: Wow, you got me there...
	
	// Simon comments on their banter at end of dialogue how to seem to be good friends
	// He also comments on that Catherine is no longer here
	
	// Voice_SetSource("Catherine", "CathTool2", 3, 20, true, 20);
	// Voice_Play("1_CatherineGivesDirections");
	
	// Final scene --
	// No transmissions can be found
	// The player tries to open the path to the escape pod (it malfunctions)
	// All is hopeless
	// The only thing the player can do is sit down on do nothing (look at Tau final survivor scene)
	
	// !! Simon falls asleep !! He starts to have delusions, everything that happens below is not real
	
	// Silence accompanied with melancholic music
	// After some time, the large screen updates, the player can retrieve more dialogue from the omnitool
	// More dialogue between Simon and Cath she has saved (cute)

	// When the player approaches the seat again a voice comes from the coms room's (double speakers beside the large monitor)
	// The player approaches the screen and after some white noise, Catherine's voice can be lightly heard (it's a jebait)
	// The player has to focus in on the signal (look at Upsilon)
	// When the player has zoned in, Simon shoutes "Catherine!", The response is from a voice too familiar (Simon's own voice)
	// --THE END--
	
	// Epilogue --
	// After the screen goes black the player is loaded into a different map (where you play as another Simon)
	// A hatch opens above the player bubbles rise (player is climbing the ladder, they cannot climb down)
	// Create the environment from the images in the project folder as inspiration
	
	//} -----------
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 *INTRO - ZEPPELIN CRASH SITE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
	
		float mfDistToLanding;
		float mfTotalDistToLanding;
		cVector3f mvLandingPos;
		cVector3f mvStartingPos;
		
		//-------------------------------------------------------
		
		void SetupZeppelinCrash()
		{
			// Zeppelin data
			Entity_SetInteractionDisabled("ZeppelinRailing_*", true);
			
			mfTotalDistToLanding = -1.0f;
			mvLandingPos = cVector3f(1200, 3607, 800);
			mvStartingPos = Map_GetEntity("ZeppelinPlatform").GetPosition();
			mlZepInfoImage=1;
			mfZepInfoTimer=0.0f;
			
			// Omnitool
			ParticleSystem_CreateAtEntityExt("ZeppelinOmniToolPS_Sparks", "elec_sparks_tiny_continous.ps", "ZeppelinOmniToolSparkPos", false, cColor_White, 2);
			ParticleSystem_SetVisible("ZeppelinOmniToolPS_Sparks", false);
			ParticleSystem_CreateAtEntityExt("ZeppelinOmniToolPS_Bubbles", "loop_waterbubbles_small_stream.ps", "ZeppelinOmniToolBubblePos", false, cColor_White, 1);
			Map_AddTimer("OmniToolFlash", cMath_RandRectf(0.25, 2.0), "Timer_ZeppelinOmniToolFlash");
			Sound_CreateAtEntity("BrokenCathtoolBubbles", "02_03_delta/AMB/Spot/omnitool_bubble_sparks", "ZeppelinOmniToolBubblePos");
			
	//		//Remove broken chip effects
	//		Map_RemoveTimer("OmniToolFlash");
	//		Map_RemoveTimer("StopFlash");
	//		ParticleSystem_Destroy("ZeppelinOmniToolPS_*");
	//		Sound_Stop("BrokenCathtoolBubbles", 0.25f);
		}
		
		//-------------------------------------------------------
		
		void Timer_ZeppelinOmniToolFlash(const tString &in asTimer)
		{
			if (asTimer == "StopFlash")
			{
				OmniToolSparkEffect_Stop("Zeppelin");
				Map_AddTimer("OmniToolFlash", cMath_RandRectf(0.25, 2.0), "Timer_ZeppelinOmniToolFlash");
				return;
			}
			float fTime = OmniToolSparkEffect_Start("Zeppelin");
			Map_AddTimer("StopFlash", fTime, "Timer_ZeppelinOmniToolFlash");
		}
		
		//-------------------------------------------------------
		
		float OmniToolSparkEffect_Start(const tString &in asPrefix)
		{
			ParticleSystem_SetVisible(asPrefix+"OmniToolPS_Sparks", true);
			float fTime = cMath_RandRectf(0.013, 0.04);
			LightFlash_Add(fTime, 0.01, 0.01, asPrefix+"OmniToolSparkPos", cColor(0.438,0.829,1,0.03), 0.5, 10);
			return fTime;
		}
	 
		//-------------------------------------------------------
		
		void OmniToolSparkEffect_Stop(const tString &in asPrefix)
		{
			ParticleSystem_SetVisible(asPrefix+"OmniToolPS_Sparks", false);
		}
		
		//-------------------------------------------------------
		
		// When the player leaves the crash site reset the environmental particle properties
		
		int mlStormScreenEffectID = -1;
		int mlStormShakeID = -1;
		
		bool OnCollide_StormEffects(const tString &in asParent, const tString &in asChild, int alState)
		{
			bool bRunStormEffect = alState == 1;
			StormScreenEffectManager(bRunStormEffect);
			
			if (bRunStormEffect)
				mlStormShakeID = Effect_Shake_Start(0.0025, -1, 3, 3, cVector3f(1, 1, 0), 20);
			else 
				Effect_Shake_FadeOut(mlStormShakeID, 3.0f);
			
			return true;
		}
		
		void StormScreenEffectManager(bool asRunStormEffect)
		{
			if (asRunStormEffect == false)
			{
				// Turn off storm dirt effect
				ParticleSystem_Destroy("StormDirt");
				
				// Turn off storm refraction effect
				if (mlStormScreenEffectID != -1)
				{
					Effect_Screen_FadeOut(mlStormScreenEffectID, 3.0f);
					mlStormScreenEffectID = -1;
				}
			}
			else
			{
				// Storm dirt effect
				ParticleSystem_CreateAtEntityExt("StormDirt", "tau_storm_dirt_max.ps", "Camera", 
					true, cColor_White, 0.75f, false, 0, 0);
				
				// Storm refraction effect
				if (mlStormScreenEffectID == -1)
				{
					mlStormScreenEffectID = Effect_Screen_Start("storm_refraction.mat", cVector2f(0.5, 0.5), 
												cVector2f(1.8, 1.8));
					Effect_Screen_FadeAlpha(mlStormScreenEffectID, 1.0f, 3.0f);
				}
			}
		}
		
		bool OnCollide_SetStormWindVelocity(const tString &in asParent, const tString &in asChild, int alState)
		{
			cLux_AddDebugMessage("Updating particle wind velocity.");
			
			if (alState == 1)
				Map_FadeEnvironmentParticleWindVelocity(gvStormWindVelocity, 3.0f);
			else
				Map_FadeEnvironmentParticleWindVelocity(gvIndoorWindVelocity, 3.0f);
			
			return true;
		}
		
		//-------------------------------------------------------
		
		bool OnCollide_ZeppelinStepCreak(const tString &in asParent, const tString &in asChild, int alState)
		{
			return true;
		}
		
		//-------------------------------------------------------
		
		//} END General
		
		// -- IDEAS --
		// The player will lose their part of their arm just like in the original game (before the suicide, in the station)
		// When the player has stood to close to the rave for too their suit starts to beep (red around screen at beep)
		// Katebot will go deep into the abyss to repair something, on a terminal the player can see Katebot's position moving (green circle)
		// The signal is cut off (the cirlce no no longer moves/or disappears). The player finds Katebot destroyed or covered in rocks
		// Use 01_03_upsilon_outside/katebot/kate_trapped_alarm to locate Katebot more easily
		// In a later scene Katebot has to sacricife herself so the player can proceed forward.
		
		// Map: 00_00_abyss_intro
		
		// Scene 1 --
		// Map starts with the player flying through a strong underwater current (Omicron outside pipe animation)
		// They crash on the ground, stand up
		// Player wanders aimlessly in the abyss, eventually finds the obelisk
		
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		
		// USEFUL SFX:
		// Use level_amb_shared_underwater/amb/spots/oceanlife/fishes_group_swimming for large sources of bubbling/flowing water
		// 04_01_tau_outside/SFX/near_death on obelisk interact
		// 04_01_tau_outside/SFX/ross_death_wake_sweet on leviathan collision
		// level_amb_shared_underwater/amb/spots/scary/eerie_tone_01 in the background
		// level_amb_shared_underwater/amb/spots/scary/ for scary sounds in the cave
		// Play level_amb_shared_underwater/amb/spots/metal/binaural_roof_screech when approaching Wau (still works in a cave)
		// 04_01_stormstart for long scary moment (when the player enters the area with blood covered walls lit up by a fallen spotlight)
		
		// NEXT MAP (THIS MAP)
		
		// Zepplin code: 049
		
		/////////////////////////////////////////
		// SCENE 1 EVENT 1 - *Simon wakes up*
		//{///////////////////////////////////////
		
		// HAVE A LONG BRIDGE (UPSILON AWAKE)
		// Play some Catherine flashback dialogue here
		// Make Simon's head hurt here (convey with screen effects and Simon emoting)
		// After implement a slideshow about launching a satellite (phi_inside)
		// The player will hear it in the distance in a corridor (from the other end of the long bridge tunnel - upsilon tunnel)
		// Have it play on a loop with no player interaction
		
		//-------------------------------------------------------
		
		// The player has low HP (CONVEY THIS WITH SCREEN EFFECTS, AND SO ON)
		// After the player wakes up KATEBOT shows up scanning the environment
		// When it looks at the player it makes some noise *beep* *beep*
		// Lots of smoke and bubbles from fire underwater
		// There are doors to other rooms, but the player cannot enter because of the new pressure (on the other end, water is leaking slightly)
		// To enter the station the player has to find the nearest airlock (need to use the omnitool)
		
		// PICK UP OMNITOOL
		
		// When player stands on the zeppelin play 04_01_tau_outside/SFX/storm/sweeteners/exit_elevator
		
		// Terminal A is still running but glitched. The player can see the distance away from Theta (4000+ meters)
		// Play dialogue when the player looks at the completely broken omnitool.
		// Add sparks accompanied with bubbles
		
		// Simon thinks that Cath is completely fucked (but she is still functioning, she will reveal herself in the final scene to be still here)
		// She will say that she is an asshole for losing hope so quickly (fade out to black).
		// Simon says "Catherine...?"
		// She mentions how it felt like the blink of an eye for her, (then run the credits).
		
		// Lock player like in dialogue when talking "to" Catherine and play event_look_at_hands_2_1 or event_look_at_hands_2_1_intense when Simon is angry
		
		// THE PLAYER HAS TO CRAWL THROUGH RUBBLE -- Show where the player has to go with sparks from a cable
		// Crawl through a hole with cables hanging through the hole, on of the cables spark
		
		// KateBot passes the double windows, her light lights up the room helping the player to see since it's so dark
		
		void SetupIntro()
		{
			SequenceIntro("");	
		}
		
		// Add the heartbeat
		// Do special screen effects every heartbeat
		// Simon emotes (moaning, coughing, groaning)
		// Turn off the emotes during dialogue (use a bool check)
		
		// 04_01_stormstart for long scary moment (when the player enters the area with blood covered walls lit up by a fallen spotlight)
		
		// 04_01_tau_outside/SFX/elevator/docking_alarm, this sound runs at a loop because of the fact the station is broken
		// Have red lamps spinning in the same interval as the sound (play the sound at these lamps)
		// Set the animation speed to fit the inteval of the sound
		
		// Play 04_01_tau_outside/SFX/wake_up_sweet on wakeup
		
		// Play 04_01_tau_outside/SFX/near_death because Simon is near death
		
		// The player then wakes up quickly beside the crashes zeppilin
		
		// Link 01_03_robotreaction1 and 01_03_robotreaction2 together - play 01_03_robotreaction2 first then 01_03_robotreaction1 (Up and down effect)
		// 02_04_stormends when the player wakes up
		
		// There is a storm outside and lightning flashing and thunder rumbling
		
		// Play 05_02/SFX/sat/fly_out when the player has stood up
		
		cSequenceStatesData mIntroSequence;
		void SequenceIntro(const tString &in asTimer)
		{
			Sequence_Begin("SequenceIntro", mIntroSequence);
			if(Sequence_DoStepAndWait(2))
			{
				Player_SetHealth(0.25f);
			}
			else if (Sequence_DoStepAndWait(2))
			{
				
			}
			Sequence_End();
			
		}
		
		//-------------------------------------------------------
		
		//} END Simon wakes up
		
		/////////////////////////////////////////
		// SCENE 1 EVENT X - *Metal piece falls down*
		//{///////////////////////////////////////
		
		bool OnCollide_MetalPieceFall(const tString &in asParent, const tString &in asChild, int alState)
		{
			// TRIGGER ONLY WHEN THE PLAYER HAS PICKED UP THE OMNITOOL
			cLux_AddDebugMessage("!! METAL PIECE FALLING !!");
			return false;
		}
		
		//-------------------------------------------------------
		
	//} END SCENE 1
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////

    /////////////////////////////////////////
    // XX
    /////////////////////////////////////////
 
    //-------------------------------------------------------
	
	/////////////////////////////////////////
	// Terminal *Zeppelin A*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void OnGuiZeppelinA(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_04_theta_outside");
	
		cImGuiLabelData label;
		label.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Medium));
		label.mFont.mvSize = cVector2f(50, 50);
	
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		// ADD GLITCH LINES
		
		if (mfTotalDistToLanding<0.0f)
			return;
			
		float fDist = 1.0f-(mfDistToLanding/mfTotalDistToLanding);
		cVector3f vMapStart = cVector3f(-345,-300,1.0f);
		cVector3f vMapEnd = cVector3f(-425.0f,-120.0f,1.0f);
		cVector3f vOffs = (vMapEnd-vMapStart)*fDist;
		cVector3f vMapCurrent = vMapStart+vOffs;
		
		float fDepth=2534.0f+(mvStartingPos.y-mvLandingPos.y)*fDist;
		
		ImGui_GroupBegin(cVector3f_Zero, ImGui_GetSize());
		
		////////////////////
		// Map		
		ImGui_DoImage(cImGuiGfx("zepmap", eImGuiGfx_Texture), 
			vMapCurrent, ImGui_NrmSizeGroup(cVector2f(1.75f,1.75f)) );
		
		////////////////////
		// Cross
		ImGui_DoImage(cImGuiGfx("zepcross", eImGuiGfx_Texture), 
			ImGui_NrmPosGroup(cVector3f(0.525,0.325,2.0f)), ImGui_NrmSizeGroup(cVector2f(0.125f,0.2f)) );

		////////////////////
		// Distance
		tString sDist = ""+mfDistToLanding;
		int lDotPos = cString_GetLastCharPos(sDist, '.');
		sDist = cString_Sub(sDist, 0, lDotPos+3);
		
		tString sDepth = ""+fDepth;
		lDotPos = cString_GetLastCharPos(sDepth, '.');
		sDepth = cString_Sub(sDepth, 0, lDotPos+3);

		ImGui_DoLabelExt("ZepGui_Dest", label, cVector3f(120.0f,420.0f,1.0f), cVector2f_MinusOne, 1.0f);
		
		tWString sDistMsg = cResources_Translate("02_04_theta_outside", "ZepGui_DistanceDepth");
		
		// Resize for translation here to get a constant font size instead of one that changes depending on dist/depth
		ImGui_ResizeFontToFit(sDistMsg, label.mFont, ImGui_GetCurrentGroupSize().x-240);
		
		sDistMsg = cString_ReplaceStringToW(sDistMsg, cString_To16Char("%dist"), cString_To16Char(sDist));
		sDistMsg = cString_ReplaceStringToW(sDistMsg, cString_To16Char("%depth"), cString_To16Char(sDepth));
		
		ImGui_SetTextOverride(sDistMsg);
		ImGui_DoLabelExt("", label, cVector3f(120.0f,480.0f,1.0f), cVector2f_MinusOne, 1.0f);
			
		ImGui_GroupEnd();
	}
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Zeppelin B*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	int mlZepInfoImage;
	float mfZepInfoTimer;
	
	//-------------------------------------------------------
	
	void OnGuiZeppelinB(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_04_theta_outside");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		ImGui_GroupBegin(cVector3f_Zero, ImGui_GetSize());
		
		mfZepInfoTimer+=afTimeStep;
		if (mfZepInfoTimer>2.0f)
		{
			mfZepInfoTimer-=2.0f;
			mlZepInfoImage++;
			if (mlZepInfoImage>4)
			{
				mlZepInfoImage=1;
			}
		}

		////////////////////
		// Map		
		ImGui_DoImage(cImGuiGfx("zepinfo"+mlZepInfoImage+".dds", eImGuiGfx_Texture), 
			cVector3f(0,0,10), ImGui_NrmSizeGroup(cVector2f_One) );
			
		ImGui_GroupEnd();
	}

	//-------------------------------------------------------
	
	void OnGuiZepCath(const tString&in asEntityName, float afTimeStep)
	{
		StationGuiBG_Scanlines();
		Depth_ImGui_CathPortrait(afTimeStep);
	}

	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// PRELOADING
	//{///////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
//		Map_Preload("00_01_XXX.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// AUDIO
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void AudioManager()
	{
		
	}
	
	//-------------------------------------------------------
	
	//} END AUDIO
}