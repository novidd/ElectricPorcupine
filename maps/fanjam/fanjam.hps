#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"

#include "helper_imgui_station.hps"

#include "helpers/helper_player.hps"
#include "custom_depth/helper_custom_depth_audio.hps"
#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai_puppet.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		
	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		///////////////////////////
		// PARTICLES CREATED
		///////////////////////////
		ParticleSystem_Preload("");
		
		///////////////////////////
		// PLAYER HANDS
		///////////////////////////
		PlayerHands_PreloadHandModel_Diving();
		
		///////////////////////////
		// IMGUI
		///////////////////////////
		OmnitoolGui_Preload();
		StationGui_PreloadDefault();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			cLux_AddDebugMessage("Debug on.");
			Sound_FadeGlobalVolume(1.0f, 0.5f, eSoundEntryType_WorldAll);
		}
		
		////////////////////////////
		// Setup
		
		// Brandon
		SetupBrandon();
		
		// Simon death scene
		Entity_StopAnimation("SimonDeathHands");
		
		// Puppet victims
		// puppet_victim_sitting_in_chair
		// puppet_victim_lying
		// puppet_victim_lying_against_wall
		Entity_PlayAnimation("IntroPuppetVictim", "puppet_victim_lying_against_wall", 0, true, true);
		
		////////////////////////////
		// Kick off intro
		bool bDoIntro = true;
		
		if (cLux_ScriptDebugOn())
		{
//			 bDoIntro = false;
		}
		
		if (bDoIntro)
		{
//			SetupIntroA();
			SetupIntroB();
		}
		
		///////////////////////////////
		// Defaults
		Player_SetAmbientLight_Indoors();
		Player_SetFootWear("default");
		Player_SetClothing("default");
		PlayerHands_SetHandModel_Diving();
		PlayerEnergy_SetFlowerSwallows(true);
		if (cLux_ScriptDebugOn())
		{
			
		}
		
//		Tool_PickUp("objective_datapad", false, false);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Decal_SetVisibleInArea(true, "BrandonDecals", mvBrandonDecalMaterials);
		}
		
		if(alAction == eAction_Test2)
		{
			Decal_SetVisibleInArea(false, "BrandonDecals", mvBrandonDecalMaterials);
		}
		
		if(alAction == eAction_Test3)
		{
			SimonDeathCam();
		}
		
		if(alAction == eAction_Test4)
		{
			Entity_SetActive("SimonDeathHands", false);
			CameraAnimation_End();
			Player_ShowCrossHairIcons(true);
			
			Entity_SetActive("BrandonSplat", false);
			Decal_SetVisibleInArea(false, "BrandonDecals", mvBrandonDecalMaterials);
			ParticleSystem_SetVisible("BrandonParticles_*", false);
			
			// Misc
			Entity_SetActive("PrinterPaper", false);
			Player_Teleport("Cave");
			
			// Girders
			Entity_SetActive("BrandonDebrisBefore_*", true);
			Entity_SetActive("BrandonDebrisAfter_*", false);
			
			// Effects
			Player_SetHealth(1.0f);
		}
		
		if(alAction == eAction_Test5)
		{
			ParticleSystem_SetVisible("BrandonParticles_*", false);
		}
		
		// The objective datapad
//		if(abPressed && alAction==eAction_Flashlight)
//		{
//			SetObjectiveDatapadActive(!mbDatapadActive);
//		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep) 
	{
		// Do the intro Terms of Conditions Terminal here
	}
	
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	void OnTimer_ResumeSequence(const tString &in asTimer)
	{
		SequenceStates_Resume(asTimer);
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// *Objective datapad*
	/////////////////////////////////////////
	
	bool mbDatapadActive = false;
	
	void SetObjectiveDatapadActive(bool abActive)
	{
			// This way the player cannot pull out the pad while already interacting with terminal/reading etc
			if (Player_IsInteracting()) return;
			
			// Unequip tool if already in use
			if (Player_GetCurrentToolEntityName() == "objective_datapad" || abActive == false)
			{
				Player_UnequipTool();
				
				// Enables the players ability to interact with terminals/readables when pad is put down
				Player_SetInteractionAllowed(true);
				return;
			}
			
			Player_EquipTool("objective_datapad", "");
			
			// Disable the players ability to interact with terminals/readables while the pad is out
			Player_SetInteractionAllowed(false);
	}
	
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *FAN JAM SEQUENCE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Sequence A - Start in the station*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		// - Play this in a corridor: 01_04_transport_station/Special/Train/infomercial/music
		
		int mlDOFLightsOn = -1;
		
		void SetupIntroA()
		{
			cLux_AddDebugMessage("Starting Intro...");
			
//			Effect_Fade_Out(0);
//			Player_SetActive(false);
			
			// Sequence
			Map_AddTimer("introsequenceA", 0.01f, "SequenceA");
			
//			mlDOFLightsOn = Effect_DoF_Start(0.2, 2, 1, 0.01);
//			Effect_DoF_FadeFocus(mlDOFLightsOn, 0.2, 2, 0.01);
		}
		
		cSequenceStatesData mSequenceA_Data;
		void SequenceA(const tString &in asTimer)
		{
			Sequence_Begin("SequenceA", mSequenceA_Data);
//			if (Sequence_DoStepAndWait(0.0f))
//			{
////				Player_Teleport("PlayerStartArea_1", true);
//				
//				// - Start looping 01_01_upsilon_awake/sfx/wake_up/nervous, just like in Upsilon (disable the sound during dialogue - use a bool)
////				Map_AddTimer("nervousbreath_start", 0.0f, "OnTimer_NervousBreath");
//			}
//			else if (Sequence_DoStepAndWait(2.0f))
//			{
//				// On lights turning on turn up the bloom
//				// Look at Upsilon awake when turing on the power in the spawn room
//				Sound_CreateAtEntity("PowerOn", "01_01_upsilon_awake/sfx/wake_up/lights_on", "Player", 0, false);
////				Map_AddTimer("Timer_LightsOnMusic", 3.5f, "Timer_LightsOnMusic");
//			}
//			else if (Sequence_DoStepAndWait(2.0f))
//			{
//				Effect_DoF_FadeFocus(mlDOFLightsOn, 0.0, 0.1, 0.4);
//				Effect_ToneMapping_FadeWhiteCut(0.1, 0.0001f);
//				
//				Effect_ImageTrail_Start(0.8, 0.001, 4, 6);
//				
//				// Turn on first set of lights/lamps here
//			}
//			else if (Sequence_DoStepAndWait(2.0f))
//			{
//				// Turn on second set of lights/lamps here
//				
//				// Terminals boot up
//			}
//			else if (Sequence_DoStepAndWait(2.0f))
//			{
//				Effect_ToneMapping_FadeWhiteCut(0.7, 3);
//			}
//			else if (Sequence_DoStepAndWait(0.5f))
//			{
//				Effect_DoF_FadeFocus(mlDOFLightsOn, 0.2, 30, 8);
//				Effect_DoF_FadeOut(mlDOFLightsOn, 7.0f);
//				Effect_ToneMapping_FadeWhiteCut(3.5, 7.0);
//			}
//			Sequence_End();

			if (Sequence_DoStepAndWait(0.0f))
			{
				// Start with the player being crouched down to pick up the item
				// Simon says: "Got it."
				// Monster makes noise, Simon turns around and stands up at the same time
				// Heartbeat
				// Nervous breath
			}
			else if (Sequence_DoStepAndWait(3.0f))
			{
				
			}
		}
		
		//-------------------------------------------------------
		
		void OnTimer_NervousBreath(const tString &in asTimer)
		{
			Sound_CreateAtEntity("nervous_breath", "01_01_upsilon_awake/sfx/wake_up/nervous", "player");
		}
		
		//-------------------------------------------------------
		
		 //} END Event *Sequence A - Start in the station*
		 
		/////////////////////////////////////////
		// Event *Sequence B - Start in the cave*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		// - Play this in a corridor: 01_04_transport_station/Special/Train/infomercial/music
		
		int mlid_Infection = -1;
		int mlid_DoF = -1;
		int mlid_RadialBlur = -1;
		
		// Do a test run with a gamepad
		void SetupIntroB()
		{
			cLux_AddDebugMessage("Starting IntroB...");
			
			Effect_Fade_Out(0);
//			Player_SetActive(false);
			Player_SetHealth(0.5f);
			Player_ShowCrossHairIcons(false);
			Player_SetMoveSpeedMul(0.1f);
			Player_SetRunSpeedMul(0);
			Player_SetCrouchDisabled(true);
			Player_SetJumpDisabled(true);
			Player_SetLookSpeedMul(0.75f);
			Player_FadeFOVMulTo(0.5f, 0.1f);
			Player_SetFlashlightDisabled(true);
			
			// Sound 
			Sound_FadeGlobalVolume(0.0f, 0, eSoundEntryType_World);
			Sound_FadeGlobalVolume(0.0f, 0, eSoundEntryType_GuiWorld);
			
			// Effects
			mlid_Infection = Effect_Screen_Start("damage_steam_screen.mat", cVector2f(0.5, 0.5), cVector2f(2, 1),  0.25f, 0.5, 9000, 0);
			mlid_DoF = Effect_DoF_Start(0, 0, 1, 0);
			
			// Cave power
			CavePowerOff();
			
			// Brandon lamp
			ParticleSystem_SetActive("BrandonLampSpark", false);
			
			// Printer paper
			Entity_SetActive("PrinterPaper", false);
			
			// The intro sequence
			Map_AddTimer("introsequenceB", 1.0f, "SequenceB");
		}
		
		cSequenceStatesData mSequenceB_Data;
		void SequenceB(const tString &in asTimer)
		{
			Sequence_Begin("SequenceB", mSequenceB_Data);
			if (Sequence_DoStepAndWait(1.0f))
			{
				Sound_FadeGlobalVolume(0.15f, 1.0f, eSoundEntryType_GuiWorld);
				Sound_FadeGlobalVolume(0.2f, 1.0f, eSoundEntryType_World);
				
				Player_Teleport("IntroBPos");
				
				Effect_VideoDistortion_Start(0.4, 1.0, 0.0, 0.5);
				
				// Power off sounds effect here
				
				// At the end of this sound file break the light (time till break: 7.25f)
				Sound_CreateAtEntity("wau_infection", "04_03_tau_escape/SFX/wau_heart_sweetener", "player", 1.0f);
				Map_AddTimer("pop_brandon_lamp", 7.25f, "OnTimer_PopBrandonLamp");
				
				// Play music
			}
			else if (Sequence_DoStepAndWait(1.0f))
			{
				PlayerHands_SetUseCustomPosition(false);
				PlayerHands_SetUseCustomRotation(false);
				PlayerHands_PlayAnimation("event_look_at_hands_1_3", false, false, 0, "", true, 1.0f);
				
				// Initial effects
				Effect_VideoDistortion_Start(0.6, -1, 0.0, 0, 0.8);
				Effect_Shake_Start(0.05f, 7.0f, 0, 1);
				Effect_ImageTrail_Start(0.5f, 0, 7.0f, 0);
				mlid_RadialBlur = Effect_RadialBlur_Start(0.15f, 0.25f, 0.35f, 0);
				
				Infection_CreateBorderTree(1, 30, cVector2f(14,35), 9.0f);
				Infection_CreateBorderTree(2, 30, cVector2f(14,35), 9.0f);
				Infection_CreateBorderTree(3, 30, cVector2f(14,35), 9.0f);
			}
			else if (Sequence_DoStepAndWait(2.0f))
			{
				Sound_FadeGlobalVolume(0.8f, 3.0, eSoundEntryType_World);
				Sound_FadeGlobalVolume(0.67f, 3.0, eSoundEntryType_GuiWorld);
				
				Player_FadeFOVMulTo(0.85f, 5);
				
				Emotion_StartBackgroundBreath(eBreathType_Fear, 1, 1, -1, 0, 0);
				Emotion_StartHeartbeat(0.75, 0.25, 1, -1, 0, 0);
				
				Effect_Fade_In(0.1);
				Effect_RadialBlur_FadeSize(mlid_RadialBlur, 0.1f, 7);
				
				Depth_Audio_SimonBeaten();
			}
			else if (Sequence_DoStepAndPause())
			{
				Depth_Audio_SimonBeaten();
			}
			else if (Sequence_DoStepAndWait(1.0f))
			{
				cLux_AddDebugMessage("Popping Brandon lamp...");
				
				Player_SetFlashlightDisabled(false);
				
				// The lamp breaks
				Sound_CreateAtEntity("brandon_lamp_pop", "02_07_theta_exit_a/SFX/lights_spark_out", "LampPopSource");
				ParticleSystem_SetActive("BrandonLampSpark", true);
				
				// Fade out the music here
				
				// Bloom effect for the flash
			}
			else if (Sequence_DoStepAndWait(4.0f))
			{
				Lamp_SetLit("brandon_lamp", false, false);
			}
			else if (Sequence_DoStepAndPause())
			{
				Voice_Play("NoPowerCallout", -1, "NoPowerCalloutFinished");
				
				// Increase player movement speed and stuff here
				Player_FadeMoveSpeedMulTo(0.65f, 8.0f);
				
				// Turn on the low power lights after ~15s
				// Then turn on the broken schedule screen
				// The door panel turns on
			}
			else if (Sequence_DoStepAndPause())
			{
				Button_SetSwitchedOn("cave_panel_puppet", true, true);
				
				TriggerFinalPuppet();
			}
			else if(Sequence_DoStepAndWait(1.0f))
			{
				cLux_AddDebugMessage("Turning on the broken screen!");
				
				// Broken schedule
				Lamp_SetLit("tv_community_room_1", true, true);
				Light_SetVisible("PointLight_3", true);
			}
			Sequence_End();
		}
		
					
		// Use this to create a flicker without the video distortion
//		Player_SetFlashlightFadeIn(0.1);
				
		// Can be used to make Akers show up on flashlight on
//		Player_SetFlashlightOnOffCallback("funcName"); // void funcName(bool abLit) {}
		
		//-------------------------------------------------------
		
		void NoPowerCalloutFinished(const tString &in asScene, const tString &in asSubject)
		{
			Map_AddTimer("SequenceB", 4.0f, "OnTimer_ResumeSequence");
		}
		
		//-------------------------------------------------------
		
		bool mbPuppetEndSeqStarted =false;
		
		void TriggerFinalPuppet()
		{
			Entity_SetActive("puppet_end", true);
			
			Pathfinder_Track_Clear("puppet_end");
			Pathfinder_Track_Add("puppet_end", "PathNodeArea_10", 1, -1, "idle_extra_3");
			Pathfinder_Track_Start("puppet_end", true, 1, "ReachedBrokenScreen");
			
			AttackMeter_SetCustomDamageCallback("TunnelPuppetDamage");
			
			Puppet_ChangeState_Patrol("puppet_end");
			BarkMachine_SetActive("puppet_end", false);
//			Map_AddTimer("RevealPlayerPos", 2, "Timer_RevealPlayerPos");
		}
		
		//-------------------------------------------------------
		
		void ReachedBrokenScreen(const tString &in asEntityName)
		{
			Map_AddTimer("SequenceB", 3.0f, "OnTimer_ResumeSequence");
		}
		
		//-------------------------------------------------------
		
		cSequenceStatesData mSequencePuppetCature;
		void SequencePuppetCapture(const tString &in asTimer)
		{
			Sequence_Begin("SequencePuppetCapture", mSequencePuppetCature);
			
			if (Sequence_DoStepAndWait(0.25))
			{
				Map_RemoveTimer("RevealPlayerPos");
				Sound_PreloadGroup("NPC_Creatures/Foley/InWorld/CoralPuppet_01", true);
				
				Player_SetMoveSpeedMul(0.2);
				Player_SetLookSpeedMul(0.3f);
				Effect_Shake_Start(0.85, 0.4, 0.3, 0.3, cVector3f(1, 0.3f, 0));
				
				Sound_FadeGlobalVolume(0.0f, 0.05f, eSoundEntryType_WorldAll);
			}
			else if (Sequence_DoStepAndWait(2.0f))
			{
				Effect_Fade_Out(0.025f);
				Sound_PlayGui("Player/UI/blackout_hit", 1.0f, eSoundEntryType_Gui);
				Sound_Stop("puppet_tunnel_SpotPlayer", 0.015f);
				Sound_Stop("AkersBurstDoor", 0.015f);
			}
			else if (Sequence_DoStepAndWait(0.9f))
			{
				Pathfinder_Stop("puppet_end");
				Entity_SetActive("puppet_end",false);
			}
			else if (Sequence_DoStepAndPause(0.1f))
			{
				
				Entity_SetActive("puppet_end",true);
				Puppet_SetAfterPlayerDeathAnimtionCallback("puppet_end", "PuppetTunnelDeahAnimOver");
				Puppet_StartPlayerDeathAnimation("puppet_end");
			}
			else if (Sequence_DoStepAndWait(10))
			{
				Entity_SetActive("puppet_end", false);
				Sound_SetGlobalVolume(0.0f, eSoundEntryType_WorldAll);
				Sound_SetGlobalVolume(0.0f, eSoundEntryType_GuiWorld);
				
			}
			else if (Sequence_DoStepAndWait(1))
			{
				Player_SetMoveSpeedMul(1);
				Player_SetLookSpeedMul(1);
				Player_SetHealth(1);
				
				cSound_SetGlobalVolume(1.0f, eSoundEntryType_WorldAll, eScriptGlobalVolume_AttackMeter);
				
				
				// Cut the camera to Simon death cam
//				SimonDeathCam();
			}
			
			Sequence_End();
		}
		
		//-------------------------------------------------------
		
		void PuppetTunnelDeahAnimOver()
		{
			SequenceStates_Resume("SequencePuppetCapture");
		}
		
		//-------------------------------------------------------
		
		bool EndPuppetSweetener(const tString &in asParent, const tString &in asChild, int alState)
		{
			Music_Stop(0.1f, eMusicPrio_BgAmb);
//			Music_Play("02_06_hallwaysurprise", 0.55f, false, eMusicPrio_OverrideAll);
//			Sound_CreateAtEntity("AkersBurstDoor", "02_06_theta_tunnels/sfx/events/akers_smash_door", "AkersSmashSoundSource");
				
//			Effect_Shake_Start(0.2f,0.2f,0.0f,0.1f);
			return false;
		}
		
		//-------------------------------------------------------
		
		void Timer_RevealPlayerPos(const tString &in asTimer)
		{
			Puppet_Hunt_RevealCurrentPlayerPos("puppet_end");
			Puppet_ChangeState_Hunt("puppet_end");
			Map_AddTimer("RevealPlayerPos", 0.25, "Timer_RevealPlayerPos");
		}
		
		//-------------------------------------------------------
		
		void TunnelPuppetDamage(const tString &in asSource)
		{
			if(mbPuppetEndSeqStarted) return;
			
			mbPuppetEndSeqStarted = true;
			SequencePuppetCapture("");
			
			Effect_Rumble_Start(0.9, 0.7);
		}
		
		//-------------------------------------------------------
		
		void SimonDeathCam()
		{
			// TURN ON THE LIGHTS AND TERMINALS SEQUENTALLY LAMP AFTER LAMP
			
			Entity_SetActive("SimonDeathHands", true);
			CameraAnimation_Begin("SimonDeath_Cam", "", false);
			Player_ShowCrossHairIcons(false);
			
			Entity_SetActive("BrandonSplat", true);
			Decal_SetVisibleInArea(true, "BrandonDecals", mvBrandonDecalMaterials);
			ParticleSystem_SetVisible("BrandonParticles_*", true);
			
			// Misc
			Entity_SetActive("PrinterPaper", true);
			
			// Girders
			Entity_SetActive("BrandonDebrisBefore_*", false);
			Entity_SetActive("BrandonDebrisAfter_*", true);
			
			// Effects
			Player_SetHealth(0.65f);
		}
		
		//-------------------------------------------------------
		
		void OnTimer_PopBrandonLamp(const tString &in asTimer)
		{
			SequenceStates_Resume("SequenceB");
		}
		
		//-------------------------------------------------------
		
		void CavePowerOff()
		{
			// Lights & Lamps
			Light_SetVisible("light_dynamic_*", false);
			Light_SetVisible("bottom_tower_light_*", false);
			
			Lamp_SetLit("PillarLamp_*", false, false);
			Lamp_SetLit("lamp_dynamic_*", false, false);
			
			// Broken schedule
			Lamp_SetLit("tv_community_room_1", false, false);
			Light_SetVisible("PointLight_3", false);
			
			// Panels
			Button_SetDisabled("cave_panel_*", true, false);
			
			// Sounds
			Sound_Stop("Sound_Dynamic_*", 0);
			Sound_Stop("BrokenSchedule", 0);
			
			// Cath terminal
			Lamp_SetLit("CathTerminalLamp", false, false);
			Lamp_SetLit("CathSlot_lamp_*", false, false);
			Terminal_SetGuiActive("CathTerminal", false);
			Terminal_SetGuiActive("PowerStatusTerminal", false);
			Entity_SetActive("CathSlot", false);
			Entity_SetActive("CathTool", false);
			Light_SetVisible("omnislot_light*", false);
			
			// Particles
			ParticleSystem_SetVisible("rising_steam", false);
			ParticleSystem_SetVisible("bottom_tower_partlcle_*", false);
			
			// Turn off low power lights
			Lamp_SetLit("low_power_lamp_*", false, false);
		}
		
		//-------------------------------------------------------
		
		 //} END Event *Sequence B - Start in the cave*
		 
		array<tString> mvBrandonDecalMaterials = {"blood_splatter_dull.mat", "rust_holes_large02.mat", "rust_cracks.mat", "rust_holes_large.mat", "explosion_dirt.mat"};
		 
		void SetupBrandon()
		{
			 // Disable decals & particles
//			 Decal_SetVisibleInArea(false, "BrandonDecals", mvBrandonDecalMaterials);
//			ParticleSystem_SetVisible("BrandonParticles_*", false);

			Entity_PlayAnimation("BrandonTop", "sit_about_to_leave", 0, true);
		}
	 
	 //} END SCENE X
 
 
	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////
 
		 //-------------------------------------------------------
	 
		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functions that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
 
}