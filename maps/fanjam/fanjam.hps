#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"

#include "helper_imgui_station.hps"

#include "helpers/helper_player.hps"
#include "custom_depth/helper_custom_depth_audio.hps"
#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"

#include "helper_custom_depth.hps"
#include "helper_custom_depth_ai.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		
	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		///////////////////////////
		// PARTICLES CREATED
		///////////////////////////
		ParticleSystem_Preload("");
		
		///////////////////////////
		// PLAYER HANDS
		///////////////////////////
		PlayerHands_PreloadHandModel_DeepSea();
		
		///////////////////////////
		// IMGUI
		///////////////////////////
		OmnitoolGui_Preload();
		StationGui_PreloadDefault();
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn()) 
		{
			cLux_AddDebugMessage("Debug on.");
			Sound_FadeGlobalVolume(1.0f, 0.5f, eSoundEntryType_WorldAll);
		}
		
		////////////////////////////
		// Setup
		// puppet_victim_sitting_in_chair
		// puppet_victim_lying
		// puppet_victim_lying_against_wall
		Entity_PlayAnimation("IntroPuppetVictim", "puppet_victim_lying_against_wall", 0, true, true);
		
		////////////////////////////
		// Kick off intro
		bool bDoIntro = true;
		
		if (cLux_ScriptDebugOn() == false)
		{
			// bDoIntro = false;
		}
		
		if (bDoIntro)
		{
			SetupIntro();
		}
		
		///////////////////////////////
		// Defaults
		Player_SetAmbientLight_Indoors();
		Player_SetFootWear("sneaker");
		Player_SetClothing("dressed");
		if (cLux_ScriptDebugOn())
		{
			Player_SetFlashlightDisabled(false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *SIMON LOOKS FOR AN OMNITOOL*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		 /////////////////////////////////////////
		 // General
		 //{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Akers enters the office*
		//{//////////////////////////////////////
	 
		//-------------------------------------------------------
	 
		/*Put any variables that are only used in Scene X, Event X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are only used in Scene X, Event X here.*/
	 
		//-------------------------------------------------------
		
		// - Play this in a corridor: 01_04_transport_station/Special/Train/infomercial/music
		
		void SetupIntro()
		{
			cLux_AddDebugMessage("Starting Intro...");
			
//			Effect_Fade_Out(0);
//			Player_SetActive(false);
			
			// Sequence
			Map_AddTimer("introsequence", 0.1f, "SequenceIntro");
			
		}
		
		cSequenceStatesData mSequenceIntro_Data;
		void SequenceIntro(const tString &in asTimer)
		{
			Sequence_Begin("SequenceIntro", mSequenceIntro_Data);
			if (Sequence_DoStepAndWait(5.0f))
			{
				Player_SetCrouching(true, true, true);
				Player_Teleport("IntroStartPos", true);
				
				// - Start looping 01_01_upsilon_awake/sfx/wake_up/nervous, just like in Upsilon (disable the sound during dialogue - use a bool)
				Map_AddTimer("nervousbreath_start", 0.0f, "OnTimer_NervousBreath");
			}
			else if (Sequence_DoStepAndWait(0.0f))
			{
				
			}
			
			Sequence_End();
		}
		
		//-------------------------------------------------------
		
		void OnTimer_NervousBreath(const tString &in asTimer)
		{
			Sound_CreateAtEntity("nervous_breath", "01_01_upsilon_awake/sfx/wake_up/nervous", "player");
		}
		
		//-------------------------------------------------------
		
		 //} END Event *Akers enters the office*
	 
	 //} END SCENE X
 
 
	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////
 
		 //-------------------------------------------------------
	 
		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functions that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
 
}